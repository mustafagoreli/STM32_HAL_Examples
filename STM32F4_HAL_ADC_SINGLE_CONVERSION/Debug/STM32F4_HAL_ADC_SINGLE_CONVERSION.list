
STM32F4_HAL_ADC_SINGLE_CONVERSION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ec8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003058  08003058  00013058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080030b4  080030b4  000130b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080030bc  080030bc  000130bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080030c0  080030c0  000130c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  080030c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  8 .bss          000000d4  20000070  20000070  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000144  20000144  00020070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000a7b2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000018e0  00000000  00000000  0002a852  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000800  00000000  00000000  0002c138  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000748  00000000  00000000  0002c938  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004750  00000000  00000000  0002d080  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002b7a  00000000  00000000  000317d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003434a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002268  00000000  00000000  000343c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003040 	.word	0x08003040

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003040 	.word	0x08003040

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000586:	463b      	mov	r3, r7
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000592:	4b21      	ldr	r3, [pc, #132]	; (8000618 <MX_ADC1_Init+0x98>)
 8000594:	4a21      	ldr	r2, [pc, #132]	; (800061c <MX_ADC1_Init+0x9c>)
 8000596:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000598:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <MX_ADC1_Init+0x98>)
 800059a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800059e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005a0:	4b1d      	ldr	r3, [pc, #116]	; (8000618 <MX_ADC1_Init+0x98>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005a6:	4b1c      	ldr	r3, [pc, #112]	; (8000618 <MX_ADC1_Init+0x98>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005ac:	4b1a      	ldr	r3, [pc, #104]	; (8000618 <MX_ADC1_Init+0x98>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005b2:	4b19      	ldr	r3, [pc, #100]	; (8000618 <MX_ADC1_Init+0x98>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ba:	4b17      	ldr	r3, [pc, #92]	; (8000618 <MX_ADC1_Init+0x98>)
 80005bc:	2200      	movs	r2, #0
 80005be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c0:	4b15      	ldr	r3, [pc, #84]	; (8000618 <MX_ADC1_Init+0x98>)
 80005c2:	4a17      	ldr	r2, [pc, #92]	; (8000620 <MX_ADC1_Init+0xa0>)
 80005c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c6:	4b14      	ldr	r3, [pc, #80]	; (8000618 <MX_ADC1_Init+0x98>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <MX_ADC1_Init+0x98>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <MX_ADC1_Init+0x98>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005da:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <MX_ADC1_Init+0x98>)
 80005dc:	2201      	movs	r2, #1
 80005de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005e0:	480d      	ldr	r0, [pc, #52]	; (8000618 <MX_ADC1_Init+0x98>)
 80005e2:	f000 facd 	bl	8000b80 <HAL_ADC_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005ec:	f000 f92e 	bl	800084c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80005f0:	2304      	movs	r3, #4
 80005f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005f4:	2301      	movs	r3, #1
 80005f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005fc:	463b      	mov	r3, r7
 80005fe:	4619      	mov	r1, r3
 8000600:	4805      	ldr	r0, [pc, #20]	; (8000618 <MX_ADC1_Init+0x98>)
 8000602:	f000 fc9f 	bl	8000f44 <HAL_ADC_ConfigChannel>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800060c:	f000 f91e 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000610:	bf00      	nop
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	2000009c 	.word	0x2000009c
 800061c:	40012000 	.word	0x40012000
 8000620:	0f000001 	.word	0x0f000001

08000624 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	; 0x28
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a17      	ldr	r2, [pc, #92]	; (80006a0 <HAL_ADC_MspInit+0x7c>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d127      	bne.n	8000696 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
 800064a:	4a16      	ldr	r2, [pc, #88]	; (80006a4 <HAL_ADC_MspInit+0x80>)
 800064c:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <HAL_ADC_MspInit+0x80>)
 800064e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000654:	6453      	str	r3, [r2, #68]	; 0x44
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <HAL_ADC_MspInit+0x80>)
 8000658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800065a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	4a0f      	ldr	r2, [pc, #60]	; (80006a4 <HAL_ADC_MspInit+0x80>)
 8000668:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <HAL_ADC_MspInit+0x80>)
 800066a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <HAL_ADC_MspInit+0x80>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800067e:	2310      	movs	r3, #16
 8000680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000682:	2303      	movs	r3, #3
 8000684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4619      	mov	r1, r3
 8000690:	4805      	ldr	r0, [pc, #20]	; (80006a8 <HAL_ADC_MspInit+0x84>)
 8000692:	f000 ff5b 	bl	800154c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000696:	bf00      	nop
 8000698:	3728      	adds	r7, #40	; 0x28
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40012000 	.word	0x40012000
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40020000 	.word	0x40020000

080006ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	4a10      	ldr	r2, [pc, #64]	; (80006f8 <MX_GPIO_Init+0x4c>)
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_GPIO_Init+0x4c>)
 80006ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <MX_GPIO_Init+0x4c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	4a09      	ldr	r2, [pc, #36]	; (80006f8 <MX_GPIO_Init+0x4c>)
 80006d4:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_GPIO_Init+0x4c>)
 80006d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_GPIO_Init+0x4c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]

}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800

080006fc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000700:	f000 f9aa 	bl	8000a58 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000704:	f000 f838 	bl	8000778 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000708:	f7ff ffd0 	bl	80006ac <MX_GPIO_Init>
	MX_ADC1_Init();
 800070c:	f7ff ff38 	bl	8000580 <MX_ADC1_Init>
	MX_USART2_UART_Init();
 8000710:	f000 f930 	bl	8000974 <MX_USART2_UART_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		HAL_ADC_Start(&hadc1);
 8000714:	4813      	ldr	r0, [pc, #76]	; (8000764 <main+0x68>)
 8000716:	f000 fa77 	bl	8000c08 <HAL_ADC_Start>

		if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 800071a:	2164      	movs	r1, #100	; 0x64
 800071c:	4811      	ldr	r0, [pc, #68]	; (8000764 <main+0x68>)
 800071e:	f000 fb78 	bl	8000e12 <HAL_ADC_PollForConversion>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d114      	bne.n	8000752 <main+0x56>
			data = HAL_ADC_GetValue(&hadc1);
 8000728:	480e      	ldr	r0, [pc, #56]	; (8000764 <main+0x68>)
 800072a:	f000 fbfd 	bl	8000f28 <HAL_ADC_GetValue>
 800072e:	4603      	mov	r3, r0
 8000730:	b29a      	uxth	r2, r3
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <main+0x6c>)
 8000734:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*) buffer, sprintf(buffer, "ADC value: %d\n", data), 100);
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <main+0x6c>)
 8000738:	881b      	ldrh	r3, [r3, #0]
 800073a:	461a      	mov	r2, r3
 800073c:	490b      	ldr	r1, [pc, #44]	; (800076c <main+0x70>)
 800073e:	480c      	ldr	r0, [pc, #48]	; (8000770 <main+0x74>)
 8000740:	f002 f860 	bl	8002804 <siprintf>
 8000744:	4603      	mov	r3, r0
 8000746:	b29a      	uxth	r2, r3
 8000748:	2364      	movs	r3, #100	; 0x64
 800074a:	4909      	ldr	r1, [pc, #36]	; (8000770 <main+0x74>)
 800074c:	4809      	ldr	r0, [pc, #36]	; (8000774 <main+0x78>)
 800074e:	f001 fd4e 	bl	80021ee <HAL_UART_Transmit>
		}

		HAL_ADC_Stop(&hadc1);
 8000752:	4804      	ldr	r0, [pc, #16]	; (8000764 <main+0x68>)
 8000754:	f000 fb2a 	bl	8000dac <HAL_ADC_Stop>

		HAL_Delay(500);
 8000758:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800075c:	f000 f9ee 	bl	8000b3c <HAL_Delay>
		HAL_ADC_Start(&hadc1);
 8000760:	e7d8      	b.n	8000714 <main+0x18>
 8000762:	bf00      	nop
 8000764:	2000009c 	.word	0x2000009c
 8000768:	2000008c 	.word	0x2000008c
 800076c:	08003058 	.word	0x08003058
 8000770:	200000e4 	.word	0x200000e4
 8000774:	200000f8 	.word	0x200000f8

08000778 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b094      	sub	sp, #80	; 0x50
 800077c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800077e:	f107 0320 	add.w	r3, r7, #32
 8000782:	2230      	movs	r2, #48	; 0x30
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f002 f834 	bl	80027f4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	4a28      	ldr	r2, [pc, #160]	; (8000844 <SystemClock_Config+0xcc>)
 80007a2:	4b28      	ldr	r3, [pc, #160]	; (8000844 <SystemClock_Config+0xcc>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007aa:	6413      	str	r3, [r2, #64]	; 0x40
 80007ac:	4b25      	ldr	r3, [pc, #148]	; (8000844 <SystemClock_Config+0xcc>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	4a22      	ldr	r2, [pc, #136]	; (8000848 <SystemClock_Config+0xd0>)
 80007be:	4b22      	ldr	r3, [pc, #136]	; (8000848 <SystemClock_Config+0xd0>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c6:	6013      	str	r3, [r2, #0]
 80007c8:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <SystemClock_Config+0xd0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d4:	2301      	movs	r3, #1
 80007d6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007de:	2302      	movs	r3, #2
 80007e0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80007e8:	2304      	movs	r3, #4
 80007ea:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80007ec:	23a8      	movs	r3, #168	; 0xa8
 80007ee:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f0:	2302      	movs	r3, #2
 80007f2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80007f4:	2304      	movs	r3, #4
 80007f6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007f8:	f107 0320 	add.w	r3, r7, #32
 80007fc:	4618      	mov	r0, r3
 80007fe:	f001 f83f 	bl	8001880 <HAL_RCC_OscConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x94>
		Error_Handler();
 8000808:	f000 f820 	bl	800084c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800080c:	230f      	movs	r3, #15
 800080e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000810:	2302      	movs	r3, #2
 8000812:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000818:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800081c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800081e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000822:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	2105      	movs	r1, #5
 800082a:	4618      	mov	r0, r3
 800082c:	f001 faa0 	bl	8001d70 <HAL_RCC_ClockConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0xc2>
		Error_Handler();
 8000836:	f000 f809 	bl	800084c <Error_Handler>
	}
}
 800083a:	bf00      	nop
 800083c:	3750      	adds	r7, #80	; 0x50
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800
 8000848:	40007000 	.word	0x40007000

0800084c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000852:	e7fe      	b.n	8000852 <Error_Handler+0x6>

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4a10      	ldr	r2, [pc, #64]	; (80008a0 <HAL_MspInit+0x4c>)
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <HAL_MspInit+0x4c>)
 8000862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000868:	6453      	str	r3, [r2, #68]	; 0x44
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <HAL_MspInit+0x4c>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	4a09      	ldr	r2, [pc, #36]	; (80008a0 <HAL_MspInit+0x4c>)
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <HAL_MspInit+0x4c>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000884:	6413      	str	r3, [r2, #64]	; 0x40
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <HAL_MspInit+0x4c>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800

080008a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <NMI_Handler+0x4>

080008aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <HardFault_Handler+0x4>

080008b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <MemManage_Handler+0x4>

080008b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <BusFault_Handler+0x4>

080008bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <UsageFault_Handler+0x4>

080008c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f0:	f000 f904 	bl	8000afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <_sbrk+0x50>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d102      	bne.n	800090e <_sbrk+0x16>
		heap_end = &end;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <_sbrk+0x50>)
 800090a:	4a10      	ldr	r2, [pc, #64]	; (800094c <_sbrk+0x54>)
 800090c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <_sbrk+0x50>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <_sbrk+0x50>)
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4413      	add	r3, r2
 800091c:	466a      	mov	r2, sp
 800091e:	4293      	cmp	r3, r2
 8000920:	d907      	bls.n	8000932 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000922:	f001 ff3d 	bl	80027a0 <__errno>
 8000926:	4602      	mov	r2, r0
 8000928:	230c      	movs	r3, #12
 800092a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800092c:	f04f 33ff 	mov.w	r3, #4294967295
 8000930:	e006      	b.n	8000940 <_sbrk+0x48>
	}

	heap_end += incr;
 8000932:	4b05      	ldr	r3, [pc, #20]	; (8000948 <_sbrk+0x50>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4413      	add	r3, r2
 800093a:	4a03      	ldr	r2, [pc, #12]	; (8000948 <_sbrk+0x50>)
 800093c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800093e:	68fb      	ldr	r3, [r7, #12]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000090 	.word	0x20000090
 800094c:	20000144 	.word	0x20000144

08000950 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000954:	4a06      	ldr	r2, [pc, #24]	; (8000970 <SystemInit+0x20>)
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <SystemInit+0x20>)
 8000958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800095c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000960:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <MX_USART2_UART_Init+0x50>)
 800097c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009ac:	f001 fbd2 	bl	8002154 <HAL_UART_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009b6:	f7ff ff49 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200000f8 	.word	0x200000f8
 80009c4:	40004400 	.word	0x40004400

080009c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a19      	ldr	r2, [pc, #100]	; (8000a4c <HAL_UART_MspInit+0x84>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d12b      	bne.n	8000a42 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4a18      	ldr	r2, [pc, #96]	; (8000a50 <HAL_UART_MspInit+0x88>)
 80009f0:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <HAL_UART_MspInit+0x88>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f8:	6413      	str	r3, [r2, #64]	; 0x40
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <HAL_UART_MspInit+0x88>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4a11      	ldr	r2, [pc, #68]	; (8000a50 <HAL_UART_MspInit+0x88>)
 8000a0c:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <HAL_UART_MspInit+0x88>)
 8000a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <HAL_UART_MspInit+0x88>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a22:	230c      	movs	r3, #12
 8000a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a32:	2307      	movs	r3, #7
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4805      	ldr	r0, [pc, #20]	; (8000a54 <HAL_UART_MspInit+0x8c>)
 8000a3e:	f000 fd85 	bl	800154c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a42:	bf00      	nop
 8000a44:	3728      	adds	r7, #40	; 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40004400 	.word	0x40004400
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020000 	.word	0x40020000

08000a58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a5c:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <HAL_Init+0x40>)
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <HAL_Init+0x40>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a68:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <HAL_Init+0x40>)
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <HAL_Init+0x40>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a74:	4a08      	ldr	r2, [pc, #32]	; (8000a98 <HAL_Init+0x40>)
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <HAL_Init+0x40>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a80:	2003      	movs	r0, #3
 8000a82:	f000 fd2f 	bl	80014e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a86:	200f      	movs	r0, #15
 8000a88:	f000 f808 	bl	8000a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a8c:	f7ff fee2 	bl	8000854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023c00 	.word	0x40023c00

08000a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_InitTick+0x54>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_InitTick+0x58>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4619      	mov	r1, r3
 8000aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 fd39 	bl	8001532 <HAL_SYSTICK_Config>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e00e      	b.n	8000ae8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b0f      	cmp	r3, #15
 8000ace:	d80a      	bhi.n	8000ae6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	f000 fd0f 	bl	80014fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000adc:	4a06      	ldr	r2, [pc, #24]	; (8000af8 <HAL_InitTick+0x5c>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e000      	b.n	8000ae8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000000 	.word	0x20000000
 8000af4:	20000008 	.word	0x20000008
 8000af8:	20000004 	.word	0x20000004

08000afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_IncTick+0x20>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_IncTick+0x24>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <HAL_IncTick+0x24>)
 8000b0e:	6013      	str	r3, [r2, #0]
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	2000013c 	.word	0x2000013c

08000b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return uwTick;
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <HAL_GetTick+0x14>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	2000013c 	.word	0x2000013c

08000b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b44:	f7ff ffee 	bl	8000b24 <HAL_GetTick>
 8000b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b54:	d005      	beq.n	8000b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <HAL_Delay+0x40>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	4413      	add	r3, r2
 8000b60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b62:	bf00      	nop
 8000b64:	f7ff ffde 	bl	8000b24 <HAL_GetTick>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	1ad2      	subs	r2, r2, r3
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d3f7      	bcc.n	8000b64 <HAL_Delay+0x28>
  {
  }
}
 8000b74:	bf00      	nop
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000008 	.word	0x20000008

08000b80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d101      	bne.n	8000b96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e033      	b.n	8000bfe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d109      	bne.n	8000bb2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff fd40 	bl	8000624 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2200      	movs	r2, #0
 8000bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	f003 0310 	and.w	r3, r3, #16
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d118      	bne.n	8000bf0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000bc6:	f023 0302 	bic.w	r3, r3, #2
 8000bca:	f043 0202 	orr.w	r2, r3, #2
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f000 fada 	bl	800118c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	f023 0303 	bic.w	r3, r3, #3
 8000be6:	f043 0201 	orr.w	r2, r3, #1
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	641a      	str	r2, [r3, #64]	; 0x40
 8000bee:	e001      	b.n	8000bf4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000c10:	2300      	movs	r3, #0
 8000c12:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d101      	bne.n	8000c22 <HAL_ADC_Start+0x1a>
 8000c1e:	2302      	movs	r3, #2
 8000c20:	e0b2      	b.n	8000d88 <HAL_ADC_Start+0x180>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2201      	movs	r2, #1
 8000c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d018      	beq.n	8000c6a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	6812      	ldr	r2, [r2, #0]
 8000c40:	6892      	ldr	r2, [r2, #8]
 8000c42:	f042 0201 	orr.w	r2, r2, #1
 8000c46:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c48:	4b52      	ldr	r3, [pc, #328]	; (8000d94 <HAL_ADC_Start+0x18c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a52      	ldr	r2, [pc, #328]	; (8000d98 <HAL_ADC_Start+0x190>)
 8000c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c52:	0c9a      	lsrs	r2, r3, #18
 8000c54:	4613      	mov	r3, r2
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	4413      	add	r3, r2
 8000c5a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000c5c:	e002      	b.n	8000c64 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	3b01      	subs	r3, #1
 8000c62:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d1f9      	bne.n	8000c5e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d17a      	bne.n	8000d6e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c80:	f023 0301 	bic.w	r3, r3, #1
 8000c84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d007      	beq.n	8000caa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ca2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cb6:	d106      	bne.n	8000cc6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbc:	f023 0206 	bic.w	r2, r3, #6
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	645a      	str	r2, [r3, #68]	; 0x44
 8000cc4:	e002      	b.n	8000ccc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000cd4:	4b31      	ldr	r3, [pc, #196]	; (8000d9c <HAL_ADC_Start+0x194>)
 8000cd6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000ce0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 031f 	and.w	r3, r3, #31
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d12a      	bne.n	8000d44 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a2b      	ldr	r2, [pc, #172]	; (8000da0 <HAL_ADC_Start+0x198>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d015      	beq.n	8000d24 <HAL_ADC_Start+0x11c>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a29      	ldr	r2, [pc, #164]	; (8000da4 <HAL_ADC_Start+0x19c>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d105      	bne.n	8000d0e <HAL_ADC_Start+0x106>
 8000d02:	4b26      	ldr	r3, [pc, #152]	; (8000d9c <HAL_ADC_Start+0x194>)
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 031f 	and.w	r3, r3, #31
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d00a      	beq.n	8000d24 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a25      	ldr	r2, [pc, #148]	; (8000da8 <HAL_ADC_Start+0x1a0>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d136      	bne.n	8000d86 <HAL_ADC_Start+0x17e>
 8000d18:	4b20      	ldr	r3, [pc, #128]	; (8000d9c <HAL_ADC_Start+0x194>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 031f 	and.w	r3, r3, #31
 8000d20:	2b0f      	cmp	r3, #15
 8000d22:	d830      	bhi.n	8000d86 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d129      	bne.n	8000d86 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	6812      	ldr	r2, [r2, #0]
 8000d3a:	6892      	ldr	r2, [r2, #8]
 8000d3c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	e020      	b.n	8000d86 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a15      	ldr	r2, [pc, #84]	; (8000da0 <HAL_ADC_Start+0x198>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d11b      	bne.n	8000d86 <HAL_ADC_Start+0x17e>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d114      	bne.n	8000d86 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	6812      	ldr	r2, [r2, #0]
 8000d64:	6892      	ldr	r2, [r2, #8]
 8000d66:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	e00b      	b.n	8000d86 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	f043 0210 	orr.w	r2, r3, #16
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	f043 0201 	orr.w	r2, r3, #1
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000d86:	2300      	movs	r3, #0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	20000000 	.word	0x20000000
 8000d98:	431bde83 	.word	0x431bde83
 8000d9c:	40012300 	.word	0x40012300
 8000da0:	40012000 	.word	0x40012000
 8000da4:	40012100 	.word	0x40012100
 8000da8:	40012200 	.word	0x40012200

08000dac <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d101      	bne.n	8000dc2 <HAL_ADC_Stop+0x16>
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	e021      	b.n	8000e06 <HAL_ADC_Stop+0x5a>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	6812      	ldr	r2, [r2, #0]
 8000dd2:	6892      	ldr	r2, [r2, #8]
 8000dd4:	f022 0201 	bic.w	r2, r2, #1
 8000dd8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d109      	bne.n	8000dfc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000df0:	f023 0301 	bic.w	r3, r3, #1
 8000df4:	f043 0201 	orr.w	r2, r3, #1
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b084      	sub	sp, #16
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
 8000e1a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e2e:	d113      	bne.n	8000e58 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e3e:	d10b      	bne.n	8000e58 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e44:	f043 0220 	orr.w	r2, r3, #32
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	e063      	b.n	8000f20 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000e58:	f7ff fe64 	bl	8000b24 <HAL_GetTick>
 8000e5c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e5e:	e021      	b.n	8000ea4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e66:	d01d      	beq.n	8000ea4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d007      	beq.n	8000e7e <HAL_ADC_PollForConversion+0x6c>
 8000e6e:	f7ff fe59 	bl	8000b24 <HAL_GetTick>
 8000e72:	4602      	mov	r2, r0
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	1ad2      	subs	r2, r2, r3
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d912      	bls.n	8000ea4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d00b      	beq.n	8000ea4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	f043 0204 	orr.w	r2, r3, #4
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	e03d      	b.n	8000f20 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d1d6      	bne.n	8000e60 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f06f 0212 	mvn.w	r2, #18
 8000eba:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d123      	bne.n	8000f1e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d11f      	bne.n	8000f1e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d006      	beq.n	8000efa <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d111      	bne.n	8000f1e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d105      	bne.n	8000f1e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	f043 0201 	orr.w	r2, r3, #1
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000f1e:	2300      	movs	r3, #0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f44:	b490      	push	{r4, r7}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d101      	bne.n	8000f60 <HAL_ADC_ConfigChannel+0x1c>
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	e107      	b.n	8001170 <HAL_ADC_ConfigChannel+0x22c>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2201      	movs	r2, #1
 8000f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b09      	cmp	r3, #9
 8000f6e:	d926      	bls.n	8000fbe <HAL_ADC_ConfigChannel+0x7a>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	68d9      	ldr	r1, [r3, #12]
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	4618      	mov	r0, r3
 8000f82:	4603      	mov	r3, r0
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	4403      	add	r3, r0
 8000f88:	3b1e      	subs	r3, #30
 8000f8a:	2007      	movs	r0, #7
 8000f8c:	fa00 f303 	lsl.w	r3, r0, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	400b      	ands	r3, r1
 8000f94:	60d3      	str	r3, [r2, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	68d9      	ldr	r1, [r3, #12]
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	6898      	ldr	r0, [r3, #8]
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	461c      	mov	r4, r3
 8000fac:	4623      	mov	r3, r4
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	4423      	add	r3, r4
 8000fb2:	3b1e      	subs	r3, #30
 8000fb4:	fa00 f303 	lsl.w	r3, r0, r3
 8000fb8:	430b      	orrs	r3, r1
 8000fba:	60d3      	str	r3, [r2, #12]
 8000fbc:	e023      	b.n	8001006 <HAL_ADC_ConfigChannel+0xc2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	6919      	ldr	r1, [r3, #16]
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	4618      	mov	r0, r3
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	4403      	add	r3, r0
 8000fd6:	2007      	movs	r0, #7
 8000fd8:	fa00 f303 	lsl.w	r3, r0, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	400b      	ands	r3, r1
 8000fe0:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6919      	ldr	r1, [r3, #16]
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	6898      	ldr	r0, [r3, #8]
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	461c      	mov	r4, r3
 8000ff8:	4623      	mov	r3, r4
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	4423      	add	r3, r4
 8000ffe:	fa00 f303 	lsl.w	r3, r0, r3
 8001002:	430b      	orrs	r3, r1
 8001004:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	2b06      	cmp	r3, #6
 800100c:	d824      	bhi.n	8001058 <HAL_ADC_ConfigChannel+0x114>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6819      	ldr	r1, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	4613      	mov	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	3b05      	subs	r3, #5
 8001024:	221f      	movs	r2, #31
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	4003      	ands	r3, r0
 800102e:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6819      	ldr	r1, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	b29b      	uxth	r3, r3
 8001040:	461c      	mov	r4, r3
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	4613      	mov	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	3b05      	subs	r3, #5
 800104e:	fa04 f303 	lsl.w	r3, r4, r3
 8001052:	4303      	orrs	r3, r0
 8001054:	634b      	str	r3, [r1, #52]	; 0x34
 8001056:	e04c      	b.n	80010f2 <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b0c      	cmp	r3, #12
 800105e:	d824      	bhi.n	80010aa <HAL_ADC_ConfigChannel+0x166>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6819      	ldr	r1, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	3b23      	subs	r3, #35	; 0x23
 8001076:	221f      	movs	r2, #31
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	4003      	ands	r3, r0
 8001080:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6819      	ldr	r1, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	b29b      	uxth	r3, r3
 8001092:	461c      	mov	r4, r3
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	4613      	mov	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4413      	add	r3, r2
 800109e:	3b23      	subs	r3, #35	; 0x23
 80010a0:	fa04 f303 	lsl.w	r3, r4, r3
 80010a4:	4303      	orrs	r3, r0
 80010a6:	630b      	str	r3, [r1, #48]	; 0x30
 80010a8:	e023      	b.n	80010f2 <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6819      	ldr	r1, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	3b41      	subs	r3, #65	; 0x41
 80010c0:	221f      	movs	r2, #31
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	4003      	ands	r3, r0
 80010ca:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6819      	ldr	r1, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	461c      	mov	r4, r3
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	4613      	mov	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4413      	add	r3, r2
 80010e8:	3b41      	subs	r3, #65	; 0x41
 80010ea:	fa04 f303 	lsl.w	r3, r4, r3
 80010ee:	4303      	orrs	r3, r0
 80010f0:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010f2:	4b22      	ldr	r3, [pc, #136]	; (800117c <HAL_ADC_ConfigChannel+0x238>)
 80010f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a21      	ldr	r2, [pc, #132]	; (8001180 <HAL_ADC_ConfigChannel+0x23c>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d109      	bne.n	8001114 <HAL_ADC_ConfigChannel+0x1d0>
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b12      	cmp	r3, #18
 8001106:	d105      	bne.n	8001114 <HAL_ADC_ConfigChannel+0x1d0>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a19      	ldr	r2, [pc, #100]	; (8001180 <HAL_ADC_ConfigChannel+0x23c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d123      	bne.n	8001166 <HAL_ADC_ConfigChannel+0x222>
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b10      	cmp	r3, #16
 8001124:	d003      	beq.n	800112e <HAL_ADC_ConfigChannel+0x1ea>
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2b11      	cmp	r3, #17
 800112c:	d11b      	bne.n	8001166 <HAL_ADC_ConfigChannel+0x222>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b10      	cmp	r3, #16
 8001140:	d111      	bne.n	8001166 <HAL_ADC_ConfigChannel+0x222>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <HAL_ADC_ConfigChannel+0x240>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a10      	ldr	r2, [pc, #64]	; (8001188 <HAL_ADC_ConfigChannel+0x244>)
 8001148:	fba2 2303 	umull	r2, r3, r2, r3
 800114c:	0c9a      	lsrs	r2, r3, #18
 800114e:	4613      	mov	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001158:	e002      	b.n	8001160 <HAL_ADC_ConfigChannel+0x21c>
      {
        counter--;
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	3b01      	subs	r3, #1
 800115e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1f9      	bne.n	800115a <HAL_ADC_ConfigChannel+0x216>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bc90      	pop	{r4, r7}
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40012300 	.word	0x40012300
 8001180:	40012000 	.word	0x40012000
 8001184:	20000000 	.word	0x20000000
 8001188:	431bde83 	.word	0x431bde83

0800118c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001194:	4b79      	ldr	r3, [pc, #484]	; (800137c <ADC_Init+0x1f0>)
 8001196:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	431a      	orrs	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	6812      	ldr	r2, [r2, #0]
 80011ba:	6852      	ldr	r2, [r2, #4]
 80011bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	6812      	ldr	r2, [r2, #0]
 80011ca:	6851      	ldr	r1, [r2, #4]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	6912      	ldr	r2, [r2, #16]
 80011d0:	0212      	lsls	r2, r2, #8
 80011d2:	430a      	orrs	r2, r1
 80011d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	6812      	ldr	r2, [r2, #0]
 80011de:	6852      	ldr	r2, [r2, #4]
 80011e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80011e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	6812      	ldr	r2, [r2, #0]
 80011ee:	6851      	ldr	r1, [r2, #4]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	6892      	ldr	r2, [r2, #8]
 80011f4:	430a      	orrs	r2, r1
 80011f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	6812      	ldr	r2, [r2, #0]
 8001200:	6892      	ldr	r2, [r2, #8]
 8001202:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001206:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	6812      	ldr	r2, [r2, #0]
 8001210:	6891      	ldr	r1, [r2, #8]
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	68d2      	ldr	r2, [r2, #12]
 8001216:	430a      	orrs	r2, r1
 8001218:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121e:	4a58      	ldr	r2, [pc, #352]	; (8001380 <ADC_Init+0x1f4>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d022      	beq.n	800126a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	6812      	ldr	r2, [r2, #0]
 800122c:	6892      	ldr	r2, [r2, #8]
 800122e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001232:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	6812      	ldr	r2, [r2, #0]
 800123c:	6891      	ldr	r1, [r2, #8]
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001242:	430a      	orrs	r2, r1
 8001244:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	6812      	ldr	r2, [r2, #0]
 800124e:	6892      	ldr	r2, [r2, #8]
 8001250:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001254:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	6812      	ldr	r2, [r2, #0]
 800125e:	6891      	ldr	r1, [r2, #8]
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001264:	430a      	orrs	r2, r1
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	e00f      	b.n	800128a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	6812      	ldr	r2, [r2, #0]
 8001272:	6892      	ldr	r2, [r2, #8]
 8001274:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001278:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	6812      	ldr	r2, [r2, #0]
 8001282:	6892      	ldr	r2, [r2, #8]
 8001284:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001288:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	6812      	ldr	r2, [r2, #0]
 8001292:	6892      	ldr	r2, [r2, #8]
 8001294:	f022 0202 	bic.w	r2, r2, #2
 8001298:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	6812      	ldr	r2, [r2, #0]
 80012a2:	6891      	ldr	r1, [r2, #8]
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	7e12      	ldrb	r2, [r2, #24]
 80012a8:	0052      	lsls	r2, r2, #1
 80012aa:	430a      	orrs	r2, r1
 80012ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d01b      	beq.n	80012f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	6812      	ldr	r2, [r2, #0]
 80012c0:	6852      	ldr	r2, [r2, #4]
 80012c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	6812      	ldr	r2, [r2, #0]
 80012d0:	6852      	ldr	r2, [r2, #4]
 80012d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80012d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	6812      	ldr	r2, [r2, #0]
 80012e0:	6851      	ldr	r1, [r2, #4]
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80012e6:	3a01      	subs	r2, #1
 80012e8:	0352      	lsls	r2, r2, #13
 80012ea:	430a      	orrs	r2, r1
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	e007      	b.n	8001300 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	6812      	ldr	r2, [r2, #0]
 80012f8:	6852      	ldr	r2, [r2, #4]
 80012fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	6812      	ldr	r2, [r2, #0]
 8001308:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800130a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800130e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	6812      	ldr	r2, [r2, #0]
 8001318:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	69d2      	ldr	r2, [r2, #28]
 800131e:	3a01      	subs	r2, #1
 8001320:	0512      	lsls	r2, r2, #20
 8001322:	430a      	orrs	r2, r1
 8001324:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	6812      	ldr	r2, [r2, #0]
 800132e:	6892      	ldr	r2, [r2, #8]
 8001330:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001334:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	6812      	ldr	r2, [r2, #0]
 800133e:	6891      	ldr	r1, [r2, #8]
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8001346:	0252      	lsls	r2, r2, #9
 8001348:	430a      	orrs	r2, r1
 800134a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	6812      	ldr	r2, [r2, #0]
 8001354:	6892      	ldr	r2, [r2, #8]
 8001356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800135a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	6812      	ldr	r2, [r2, #0]
 8001364:	6891      	ldr	r1, [r2, #8]
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	6952      	ldr	r2, [r2, #20]
 800136a:	0292      	lsls	r2, r2, #10
 800136c:	430a      	orrs	r2, r1
 800136e:	609a      	str	r2, [r3, #8]
}
 8001370:	bf00      	nop
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	40012300 	.word	0x40012300
 8001380:	0f000001 	.word	0x0f000001

08001384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a0:	4013      	ands	r3, r2
 80013a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b6:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <__NVIC_SetPriorityGrouping+0x44>)
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	60d3      	str	r3, [r2, #12]
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <__NVIC_GetPriorityGrouping+0x18>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	0a1b      	lsrs	r3, r3, #8
 80013d6:	f003 0307 	and.w	r3, r3, #7
}
 80013da:	4618      	mov	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	db0a      	blt.n	8001412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fc:	490d      	ldr	r1, [pc, #52]	; (8001434 <__NVIC_SetPriority+0x4c>)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	0112      	lsls	r2, r2, #4
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	440b      	add	r3, r1
 800140c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001410:	e00a      	b.n	8001428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001412:	4909      	ldr	r1, [pc, #36]	; (8001438 <__NVIC_SetPriority+0x50>)
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	3b04      	subs	r3, #4
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	0112      	lsls	r2, r2, #4
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	440b      	add	r3, r1
 8001426:	761a      	strb	r2, [r3, #24]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000e100 	.word	0xe000e100
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800143c:	b480      	push	{r7}
 800143e:	b089      	sub	sp, #36	; 0x24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f1c3 0307 	rsb	r3, r3, #7
 8001456:	2b04      	cmp	r3, #4
 8001458:	bf28      	it	cs
 800145a:	2304      	movcs	r3, #4
 800145c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3304      	adds	r3, #4
 8001462:	2b06      	cmp	r3, #6
 8001464:	d902      	bls.n	800146c <NVIC_EncodePriority+0x30>
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3b03      	subs	r3, #3
 800146a:	e000      	b.n	800146e <NVIC_EncodePriority+0x32>
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	2201      	movs	r2, #1
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	1e5a      	subs	r2, r3, #1
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	401a      	ands	r2, r3
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001482:	2101      	movs	r1, #1
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	fa01 f303 	lsl.w	r3, r1, r3
 800148a:	1e59      	subs	r1, r3, #1
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	4313      	orrs	r3, r2
         );
}
 8001492:	4618      	mov	r0, r3
 8001494:	3724      	adds	r7, #36	; 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014b0:	d301      	bcc.n	80014b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b2:	2301      	movs	r3, #1
 80014b4:	e00f      	b.n	80014d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b6:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <SysTick_Config+0x40>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014be:	210f      	movs	r1, #15
 80014c0:	f04f 30ff 	mov.w	r0, #4294967295
 80014c4:	f7ff ff90 	bl	80013e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <SysTick_Config+0x40>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ce:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <SysTick_Config+0x40>)
 80014d0:	2207      	movs	r2, #7
 80014d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	e000e010 	.word	0xe000e010

080014e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff ff49 	bl	8001384 <__NVIC_SetPriorityGrouping>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b086      	sub	sp, #24
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
 8001506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800150c:	f7ff ff5e 	bl	80013cc <__NVIC_GetPriorityGrouping>
 8001510:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	68b9      	ldr	r1, [r7, #8]
 8001516:	6978      	ldr	r0, [r7, #20]
 8001518:	f7ff ff90 	bl	800143c <NVIC_EncodePriority>
 800151c:	4602      	mov	r2, r0
 800151e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001522:	4611      	mov	r1, r2
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff5f 	bl	80013e8 <__NVIC_SetPriority>
}
 800152a:	bf00      	nop
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff ffb0 	bl	80014a0 <SysTick_Config>
 8001540:	4603      	mov	r3, r0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800154c:	b480      	push	{r7}
 800154e:	b089      	sub	sp, #36	; 0x24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
 8001566:	e16b      	b.n	8001840 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001568:	2201      	movs	r2, #1
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	429a      	cmp	r2, r3
 8001582:	f040 815a 	bne.w	800183a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	2b01      	cmp	r3, #1
 8001590:	d005      	beq.n	800159e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800159a:	2b02      	cmp	r3, #2
 800159c:	d130      	bne.n	8001600 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	2203      	movs	r2, #3
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4013      	ands	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	68da      	ldr	r2, [r3, #12]
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015d4:	2201      	movs	r2, #1
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	091b      	lsrs	r3, r3, #4
 80015ea:	f003 0201 	and.w	r2, r3, #1
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	2b03      	cmp	r3, #3
 800160a:	d017      	beq.n	800163c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	2203      	movs	r2, #3
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 0303 	and.w	r3, r3, #3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d123      	bne.n	8001690 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	08da      	lsrs	r2, r3, #3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3208      	adds	r2, #8
 8001650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001654:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	220f      	movs	r2, #15
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	691a      	ldr	r2, [r3, #16]
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	08da      	lsrs	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3208      	adds	r2, #8
 800168a:	69b9      	ldr	r1, [r7, #24]
 800168c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	2203      	movs	r2, #3
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0203 	and.w	r2, r3, #3
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 80b4 	beq.w	800183a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4a5f      	ldr	r2, [pc, #380]	; (8001854 <HAL_GPIO_Init+0x308>)
 80016d8:	4b5e      	ldr	r3, [pc, #376]	; (8001854 <HAL_GPIO_Init+0x308>)
 80016da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e0:	6453      	str	r3, [r2, #68]	; 0x44
 80016e2:	4b5c      	ldr	r3, [pc, #368]	; (8001854 <HAL_GPIO_Init+0x308>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ee:	4a5a      	ldr	r2, [pc, #360]	; (8001858 <HAL_GPIO_Init+0x30c>)
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	089b      	lsrs	r3, r3, #2
 80016f4:	3302      	adds	r3, #2
 80016f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f003 0303 	and.w	r3, r3, #3
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	220f      	movs	r2, #15
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4013      	ands	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a51      	ldr	r2, [pc, #324]	; (800185c <HAL_GPIO_Init+0x310>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d02b      	beq.n	8001772 <HAL_GPIO_Init+0x226>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a50      	ldr	r2, [pc, #320]	; (8001860 <HAL_GPIO_Init+0x314>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d025      	beq.n	800176e <HAL_GPIO_Init+0x222>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a4f      	ldr	r2, [pc, #316]	; (8001864 <HAL_GPIO_Init+0x318>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d01f      	beq.n	800176a <HAL_GPIO_Init+0x21e>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a4e      	ldr	r2, [pc, #312]	; (8001868 <HAL_GPIO_Init+0x31c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d019      	beq.n	8001766 <HAL_GPIO_Init+0x21a>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a4d      	ldr	r2, [pc, #308]	; (800186c <HAL_GPIO_Init+0x320>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d013      	beq.n	8001762 <HAL_GPIO_Init+0x216>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a4c      	ldr	r2, [pc, #304]	; (8001870 <HAL_GPIO_Init+0x324>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d00d      	beq.n	800175e <HAL_GPIO_Init+0x212>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a4b      	ldr	r2, [pc, #300]	; (8001874 <HAL_GPIO_Init+0x328>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d007      	beq.n	800175a <HAL_GPIO_Init+0x20e>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a4a      	ldr	r2, [pc, #296]	; (8001878 <HAL_GPIO_Init+0x32c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d101      	bne.n	8001756 <HAL_GPIO_Init+0x20a>
 8001752:	2307      	movs	r3, #7
 8001754:	e00e      	b.n	8001774 <HAL_GPIO_Init+0x228>
 8001756:	2308      	movs	r3, #8
 8001758:	e00c      	b.n	8001774 <HAL_GPIO_Init+0x228>
 800175a:	2306      	movs	r3, #6
 800175c:	e00a      	b.n	8001774 <HAL_GPIO_Init+0x228>
 800175e:	2305      	movs	r3, #5
 8001760:	e008      	b.n	8001774 <HAL_GPIO_Init+0x228>
 8001762:	2304      	movs	r3, #4
 8001764:	e006      	b.n	8001774 <HAL_GPIO_Init+0x228>
 8001766:	2303      	movs	r3, #3
 8001768:	e004      	b.n	8001774 <HAL_GPIO_Init+0x228>
 800176a:	2302      	movs	r3, #2
 800176c:	e002      	b.n	8001774 <HAL_GPIO_Init+0x228>
 800176e:	2301      	movs	r3, #1
 8001770:	e000      	b.n	8001774 <HAL_GPIO_Init+0x228>
 8001772:	2300      	movs	r3, #0
 8001774:	69fa      	ldr	r2, [r7, #28]
 8001776:	f002 0203 	and.w	r2, r2, #3
 800177a:	0092      	lsls	r2, r2, #2
 800177c:	4093      	lsls	r3, r2
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4313      	orrs	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001784:	4934      	ldr	r1, [pc, #208]	; (8001858 <HAL_GPIO_Init+0x30c>)
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	089b      	lsrs	r3, r3, #2
 800178a:	3302      	adds	r3, #2
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001792:	4b3a      	ldr	r3, [pc, #232]	; (800187c <HAL_GPIO_Init+0x330>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	43db      	mvns	r3, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4013      	ands	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017b6:	4a31      	ldr	r2, [pc, #196]	; (800187c <HAL_GPIO_Init+0x330>)
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017bc:	4b2f      	ldr	r3, [pc, #188]	; (800187c <HAL_GPIO_Init+0x330>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	43db      	mvns	r3, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	4313      	orrs	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017e0:	4a26      	ldr	r2, [pc, #152]	; (800187c <HAL_GPIO_Init+0x330>)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017e6:	4b25      	ldr	r3, [pc, #148]	; (800187c <HAL_GPIO_Init+0x330>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	43db      	mvns	r3, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4013      	ands	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800180a:	4a1c      	ldr	r2, [pc, #112]	; (800187c <HAL_GPIO_Init+0x330>)
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001810:	4b1a      	ldr	r3, [pc, #104]	; (800187c <HAL_GPIO_Init+0x330>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001834:	4a11      	ldr	r2, [pc, #68]	; (800187c <HAL_GPIO_Init+0x330>)
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3301      	adds	r3, #1
 800183e:	61fb      	str	r3, [r7, #28]
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	2b0f      	cmp	r3, #15
 8001844:	f67f ae90 	bls.w	8001568 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001848:	bf00      	nop
 800184a:	3724      	adds	r7, #36	; 0x24
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	40023800 	.word	0x40023800
 8001858:	40013800 	.word	0x40013800
 800185c:	40020000 	.word	0x40020000
 8001860:	40020400 	.word	0x40020400
 8001864:	40020800 	.word	0x40020800
 8001868:	40020c00 	.word	0x40020c00
 800186c:	40021000 	.word	0x40021000
 8001870:	40021400 	.word	0x40021400
 8001874:	40021800 	.word	0x40021800
 8001878:	40021c00 	.word	0x40021c00
 800187c:	40013c00 	.word	0x40013c00

08001880 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e264      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d075      	beq.n	800198a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800189e:	4ba3      	ldr	r3, [pc, #652]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 030c 	and.w	r3, r3, #12
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	d00c      	beq.n	80018c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018aa:	4ba0      	ldr	r3, [pc, #640]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d112      	bne.n	80018dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018b6:	4b9d      	ldr	r3, [pc, #628]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018c2:	d10b      	bne.n	80018dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c4:	4b99      	ldr	r3, [pc, #612]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d05b      	beq.n	8001988 <HAL_RCC_OscConfig+0x108>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d157      	bne.n	8001988 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e23f      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e4:	d106      	bne.n	80018f4 <HAL_RCC_OscConfig+0x74>
 80018e6:	4a91      	ldr	r2, [pc, #580]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 80018e8:	4b90      	ldr	r3, [pc, #576]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	e01d      	b.n	8001930 <HAL_RCC_OscConfig+0xb0>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018fc:	d10c      	bne.n	8001918 <HAL_RCC_OscConfig+0x98>
 80018fe:	4a8b      	ldr	r2, [pc, #556]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 8001900:	4b8a      	ldr	r3, [pc, #552]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	4a88      	ldr	r2, [pc, #544]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 800190c:	4b87      	ldr	r3, [pc, #540]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	e00b      	b.n	8001930 <HAL_RCC_OscConfig+0xb0>
 8001918:	4a84      	ldr	r2, [pc, #528]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 800191a:	4b84      	ldr	r3, [pc, #528]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	4a81      	ldr	r2, [pc, #516]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 8001926:	4b81      	ldr	r3, [pc, #516]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800192e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d013      	beq.n	8001960 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001938:	f7ff f8f4 	bl	8000b24 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001940:	f7ff f8f0 	bl	8000b24 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b64      	cmp	r3, #100	; 0x64
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e204      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001952:	4b76      	ldr	r3, [pc, #472]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f0      	beq.n	8001940 <HAL_RCC_OscConfig+0xc0>
 800195e:	e014      	b.n	800198a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001960:	f7ff f8e0 	bl	8000b24 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001968:	f7ff f8dc 	bl	8000b24 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b64      	cmp	r3, #100	; 0x64
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e1f0      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197a:	4b6c      	ldr	r3, [pc, #432]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0xe8>
 8001986:	e000      	b.n	800198a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d063      	beq.n	8001a5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001996:	4b65      	ldr	r3, [pc, #404]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00b      	beq.n	80019ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019a2:	4b62      	ldr	r3, [pc, #392]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d11c      	bne.n	80019e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ae:	4b5f      	ldr	r3, [pc, #380]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d116      	bne.n	80019e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ba:	4b5c      	ldr	r3, [pc, #368]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d005      	beq.n	80019d2 <HAL_RCC_OscConfig+0x152>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d001      	beq.n	80019d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e1c4      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d2:	4956      	ldr	r1, [pc, #344]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 80019d4:	4b55      	ldr	r3, [pc, #340]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	4313      	orrs	r3, r2
 80019e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e6:	e03a      	b.n	8001a5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d020      	beq.n	8001a32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019f0:	4b4f      	ldr	r3, [pc, #316]	; (8001b30 <HAL_RCC_OscConfig+0x2b0>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f6:	f7ff f895 	bl	8000b24 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019fe:	f7ff f891 	bl	8000b24 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e1a5      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a10:	4b46      	ldr	r3, [pc, #280]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0f0      	beq.n	80019fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a1c:	4943      	ldr	r1, [pc, #268]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 8001a1e:	4b43      	ldr	r3, [pc, #268]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	600b      	str	r3, [r1, #0]
 8001a30:	e015      	b.n	8001a5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a32:	4b3f      	ldr	r3, [pc, #252]	; (8001b30 <HAL_RCC_OscConfig+0x2b0>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a38:	f7ff f874 	bl	8000b24 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a40:	f7ff f870 	bl	8000b24 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e184      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a52:	4b36      	ldr	r3, [pc, #216]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f0      	bne.n	8001a40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d030      	beq.n	8001acc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d016      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a72:	4b30      	ldr	r3, [pc, #192]	; (8001b34 <HAL_RCC_OscConfig+0x2b4>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a78:	f7ff f854 	bl	8000b24 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a80:	f7ff f850 	bl	8000b24 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e164      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a92:	4b26      	ldr	r3, [pc, #152]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 8001a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f0      	beq.n	8001a80 <HAL_RCC_OscConfig+0x200>
 8001a9e:	e015      	b.n	8001acc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aa0:	4b24      	ldr	r3, [pc, #144]	; (8001b34 <HAL_RCC_OscConfig+0x2b4>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa6:	f7ff f83d 	bl	8000b24 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aae:	f7ff f839 	bl	8000b24 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e14d      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 8001ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1f0      	bne.n	8001aae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 80a0 	beq.w	8001c1a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ada:	2300      	movs	r3, #0
 8001adc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ade:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d10f      	bne.n	8001b0a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	4a0f      	ldr	r2, [pc, #60]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 8001af0:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af8:	6413      	str	r3, [r2, #64]	; 0x40
 8001afa:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <HAL_RCC_OscConfig+0x2ac>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b06:	2301      	movs	r3, #1
 8001b08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_RCC_OscConfig+0x2b8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d121      	bne.n	8001b5a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b16:	4a08      	ldr	r2, [pc, #32]	; (8001b38 <HAL_RCC_OscConfig+0x2b8>)
 8001b18:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <HAL_RCC_OscConfig+0x2b8>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b22:	f7fe ffff 	bl	8000b24 <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b28:	e011      	b.n	8001b4e <HAL_RCC_OscConfig+0x2ce>
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	42470000 	.word	0x42470000
 8001b34:	42470e80 	.word	0x42470e80
 8001b38:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b3c:	f7fe fff2 	bl	8000b24 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e106      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4e:	4b85      	ldr	r3, [pc, #532]	; (8001d64 <HAL_RCC_OscConfig+0x4e4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f0      	beq.n	8001b3c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d106      	bne.n	8001b70 <HAL_RCC_OscConfig+0x2f0>
 8001b62:	4a81      	ldr	r2, [pc, #516]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001b64:	4b80      	ldr	r3, [pc, #512]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b6e:	e01c      	b.n	8001baa <HAL_RCC_OscConfig+0x32a>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	2b05      	cmp	r3, #5
 8001b76:	d10c      	bne.n	8001b92 <HAL_RCC_OscConfig+0x312>
 8001b78:	4a7b      	ldr	r2, [pc, #492]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001b7a:	4b7b      	ldr	r3, [pc, #492]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7e:	f043 0304 	orr.w	r3, r3, #4
 8001b82:	6713      	str	r3, [r2, #112]	; 0x70
 8001b84:	4a78      	ldr	r2, [pc, #480]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001b86:	4b78      	ldr	r3, [pc, #480]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b90:	e00b      	b.n	8001baa <HAL_RCC_OscConfig+0x32a>
 8001b92:	4a75      	ldr	r2, [pc, #468]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001b94:	4b74      	ldr	r3, [pc, #464]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b98:	f023 0301 	bic.w	r3, r3, #1
 8001b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b9e:	4a72      	ldr	r2, [pc, #456]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001ba0:	4b71      	ldr	r3, [pc, #452]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba4:	f023 0304 	bic.w	r3, r3, #4
 8001ba8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d015      	beq.n	8001bde <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb2:	f7fe ffb7 	bl	8000b24 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb8:	e00a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bba:	f7fe ffb3 	bl	8000b24 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e0c5      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd0:	4b65      	ldr	r3, [pc, #404]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0ee      	beq.n	8001bba <HAL_RCC_OscConfig+0x33a>
 8001bdc:	e014      	b.n	8001c08 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bde:	f7fe ffa1 	bl	8000b24 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be4:	e00a      	b.n	8001bfc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be6:	f7fe ff9d 	bl	8000b24 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e0af      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bfc:	4b5a      	ldr	r3, [pc, #360]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1ee      	bne.n	8001be6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c08:	7dfb      	ldrb	r3, [r7, #23]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d105      	bne.n	8001c1a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c0e:	4a56      	ldr	r2, [pc, #344]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001c10:	4b55      	ldr	r3, [pc, #340]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 809b 	beq.w	8001d5a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c24:	4b50      	ldr	r3, [pc, #320]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 030c 	and.w	r3, r3, #12
 8001c2c:	2b08      	cmp	r3, #8
 8001c2e:	d05c      	beq.n	8001cea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d141      	bne.n	8001cbc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c38:	4b4c      	ldr	r3, [pc, #304]	; (8001d6c <HAL_RCC_OscConfig+0x4ec>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3e:	f7fe ff71 	bl	8000b24 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c46:	f7fe ff6d 	bl	8000b24 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e081      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c58:	4b43      	ldr	r3, [pc, #268]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1f0      	bne.n	8001c46 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c64:	4940      	ldr	r1, [pc, #256]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69da      	ldr	r2, [r3, #28]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c74:	019b      	lsls	r3, r3, #6
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7c:	085b      	lsrs	r3, r3, #1
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	041b      	lsls	r3, r3, #16
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c88:	061b      	lsls	r3, r3, #24
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c8e:	4b37      	ldr	r3, [pc, #220]	; (8001d6c <HAL_RCC_OscConfig+0x4ec>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7fe ff46 	bl	8000b24 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c9c:	f7fe ff42 	bl	8000b24 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e056      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cae:	4b2e      	ldr	r3, [pc, #184]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0x41c>
 8001cba:	e04e      	b.n	8001d5a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cbc:	4b2b      	ldr	r3, [pc, #172]	; (8001d6c <HAL_RCC_OscConfig+0x4ec>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc2:	f7fe ff2f 	bl	8000b24 <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cca:	f7fe ff2b 	bl	8000b24 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e03f      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cdc:	4b22      	ldr	r3, [pc, #136]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1f0      	bne.n	8001cca <HAL_RCC_OscConfig+0x44a>
 8001ce8:	e037      	b.n	8001d5a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d101      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e032      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cf6:	4b1c      	ldr	r3, [pc, #112]	; (8001d68 <HAL_RCC_OscConfig+0x4e8>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d028      	beq.n	8001d56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d121      	bne.n	8001d56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d11a      	bne.n	8001d56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d26:	4013      	ands	r3, r2
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d2c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d111      	bne.n	8001d56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3c:	085b      	lsrs	r3, r3, #1
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d107      	bne.n	8001d56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d50:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d001      	beq.n	8001d5a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40007000 	.word	0x40007000
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	42470060 	.word	0x42470060

08001d70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e0cc      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d84:	4b68      	ldr	r3, [pc, #416]	; (8001f28 <HAL_RCC_ClockConfig+0x1b8>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0207 	and.w	r2, r3, #7
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d20c      	bcs.n	8001dac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d92:	4b65      	ldr	r3, [pc, #404]	; (8001f28 <HAL_RCC_ClockConfig+0x1b8>)
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9a:	4b63      	ldr	r3, [pc, #396]	; (8001f28 <HAL_RCC_ClockConfig+0x1b8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0207 	and.w	r2, r3, #7
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d001      	beq.n	8001dac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e0b8      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d020      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d005      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dc4:	4a59      	ldr	r2, [pc, #356]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001dc6:	4b59      	ldr	r3, [pc, #356]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d005      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ddc:	4a53      	ldr	r2, [pc, #332]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001dde:	4b53      	ldr	r3, [pc, #332]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001de6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de8:	4950      	ldr	r1, [pc, #320]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001dea:	4b50      	ldr	r3, [pc, #320]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d044      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d107      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0e:	4b47      	ldr	r3, [pc, #284]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d119      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e07f      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d003      	beq.n	8001e2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	d107      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e2e:	4b3f      	ldr	r3, [pc, #252]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d109      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e06f      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e3e:	4b3b      	ldr	r3, [pc, #236]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e067      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e4e:	4937      	ldr	r1, [pc, #220]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001e50:	4b36      	ldr	r3, [pc, #216]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f023 0203 	bic.w	r2, r3, #3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e60:	f7fe fe60 	bl	8000b24 <HAL_GetTick>
 8001e64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e66:	e00a      	b.n	8001e7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e68:	f7fe fe5c 	bl	8000b24 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e04f      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7e:	4b2b      	ldr	r3, [pc, #172]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 020c 	and.w	r2, r3, #12
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d1eb      	bne.n	8001e68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e90:	4b25      	ldr	r3, [pc, #148]	; (8001f28 <HAL_RCC_ClockConfig+0x1b8>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0207 	and.w	r2, r3, #7
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d90c      	bls.n	8001eb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9e:	4b22      	ldr	r3, [pc, #136]	; (8001f28 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea6:	4b20      	ldr	r3, [pc, #128]	; (8001f28 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0207 	and.w	r2, r3, #7
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d001      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e032      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d008      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec4:	4919      	ldr	r1, [pc, #100]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d009      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ee2:	4912      	ldr	r1, [pc, #72]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ee4:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ef6:	f000 f821 	bl	8001f3c <HAL_RCC_GetSysClockFreq>
 8001efa:	4601      	mov	r1, r0
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	091b      	lsrs	r3, r3, #4
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <HAL_RCC_ClockConfig+0x1c0>)
 8001f08:	5cd3      	ldrb	r3, [r2, r3]
 8001f0a:	fa21 f303 	lsr.w	r3, r1, r3
 8001f0e:	4a09      	ldr	r2, [pc, #36]	; (8001f34 <HAL_RCC_ClockConfig+0x1c4>)
 8001f10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f12:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <HAL_RCC_ClockConfig+0x1c8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fdc0 	bl	8000a9c <HAL_InitTick>

  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40023c00 	.word	0x40023c00
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	08003068 	.word	0x08003068
 8001f34:	20000000 	.word	0x20000000
 8001f38:	20000004 	.word	0x20000004

08001f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f40:	b08f      	sub	sp, #60	; 0x3c
 8001f42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f48:	2300      	movs	r3, #0
 8001f4a:	637b      	str	r3, [r7, #52]	; 0x34
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f54:	4b62      	ldr	r3, [pc, #392]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 030c 	and.w	r3, r3, #12
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	d007      	beq.n	8001f70 <HAL_RCC_GetSysClockFreq+0x34>
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d008      	beq.n	8001f76 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f040 80b2 	bne.w	80020ce <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f6a:	4b5e      	ldr	r3, [pc, #376]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f6c:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8001f6e:	e0b1      	b.n	80020d4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f70:	4b5d      	ldr	r3, [pc, #372]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001f72:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f74:	e0ae      	b.n	80020d4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f76:	4b5a      	ldr	r3, [pc, #360]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f80:	4b57      	ldr	r3, [pc, #348]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d04e      	beq.n	800202a <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f8c:	4b54      	ldr	r3, [pc, #336]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	099b      	lsrs	r3, r3, #6
 8001f92:	f04f 0400 	mov.w	r4, #0
 8001f96:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	ea01 0103 	and.w	r1, r1, r3
 8001fa2:	ea02 0204 	and.w	r2, r2, r4
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4614      	mov	r4, r2
 8001faa:	0160      	lsls	r0, r4, #5
 8001fac:	6278      	str	r0, [r7, #36]	; 0x24
 8001fae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fb0:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001fb4:	6278      	str	r0, [r7, #36]	; 0x24
 8001fb6:	015b      	lsls	r3, r3, #5
 8001fb8:	623b      	str	r3, [r7, #32]
 8001fba:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001fbe:	1a5b      	subs	r3, r3, r1
 8001fc0:	eb64 0402 	sbc.w	r4, r4, r2
 8001fc4:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001fc8:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001fcc:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001fd0:	ebb8 0803 	subs.w	r8, r8, r3
 8001fd4:	eb69 0904 	sbc.w	r9, r9, r4
 8001fd8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fdc:	61fb      	str	r3, [r7, #28]
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fe4:	61fb      	str	r3, [r7, #28]
 8001fe6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001fea:	61bb      	str	r3, [r7, #24]
 8001fec:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001ff0:	eb18 0801 	adds.w	r8, r8, r1
 8001ff4:	eb49 0902 	adc.w	r9, r9, r2
 8001ff8:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001ffc:	617b      	str	r3, [r7, #20]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	ea4f 2348 	mov.w	r3, r8, lsl #9
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002010:	4640      	mov	r0, r8
 8002012:	4649      	mov	r1, r9
 8002014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002016:	f04f 0400 	mov.w	r4, #0
 800201a:	461a      	mov	r2, r3
 800201c:	4623      	mov	r3, r4
 800201e:	f7fe f927 	bl	8000270 <__aeabi_uldivmod>
 8002022:	4603      	mov	r3, r0
 8002024:	460c      	mov	r4, r1
 8002026:	637b      	str	r3, [r7, #52]	; 0x34
 8002028:	e043      	b.n	80020b2 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800202a:	4b2d      	ldr	r3, [pc, #180]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	099b      	lsrs	r3, r3, #6
 8002030:	f04f 0400 	mov.w	r4, #0
 8002034:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002038:	f04f 0200 	mov.w	r2, #0
 800203c:	ea01 0103 	and.w	r1, r1, r3
 8002040:	ea02 0204 	and.w	r2, r2, r4
 8002044:	460b      	mov	r3, r1
 8002046:	4614      	mov	r4, r2
 8002048:	0160      	lsls	r0, r4, #5
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	015b      	lsls	r3, r3, #5
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800205c:	1a5b      	subs	r3, r3, r1
 800205e:	eb64 0402 	sbc.w	r4, r4, r2
 8002062:	01a6      	lsls	r6, r4, #6
 8002064:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8002068:	019d      	lsls	r5, r3, #6
 800206a:	1aed      	subs	r5, r5, r3
 800206c:	eb66 0604 	sbc.w	r6, r6, r4
 8002070:	00f3      	lsls	r3, r6, #3
 8002072:	607b      	str	r3, [r7, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800207a:	607b      	str	r3, [r7, #4]
 800207c:	00eb      	lsls	r3, r5, #3
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	e897 0060 	ldmia.w	r7, {r5, r6}
 8002084:	186d      	adds	r5, r5, r1
 8002086:	eb46 0602 	adc.w	r6, r6, r2
 800208a:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 800208e:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8002092:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8002096:	4655      	mov	r5, sl
 8002098:	465e      	mov	r6, fp
 800209a:	4628      	mov	r0, r5
 800209c:	4631      	mov	r1, r6
 800209e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a0:	f04f 0400 	mov.w	r4, #0
 80020a4:	461a      	mov	r2, r3
 80020a6:	4623      	mov	r3, r4
 80020a8:	f7fe f8e2 	bl	8000270 <__aeabi_uldivmod>
 80020ac:	4603      	mov	r3, r0
 80020ae:	460c      	mov	r4, r1
 80020b0:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020b2:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	0c1b      	lsrs	r3, r3, #16
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	3301      	adds	r3, #1
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 80020c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020cc:	e002      	b.n	80020d4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020ce:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80020d0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	373c      	adds	r7, #60	; 0x3c
 80020da:	46bd      	mov	sp, r7
 80020dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020e0:	40023800 	.word	0x40023800
 80020e4:	00f42400 	.word	0x00f42400
 80020e8:	007a1200 	.word	0x007a1200

080020ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020f0:	4b03      	ldr	r3, [pc, #12]	; (8002100 <HAL_RCC_GetHCLKFreq+0x14>)
 80020f2:	681b      	ldr	r3, [r3, #0]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	20000000 	.word	0x20000000

08002104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002108:	f7ff fff0 	bl	80020ec <HAL_RCC_GetHCLKFreq>
 800210c:	4601      	mov	r1, r0
 800210e:	4b05      	ldr	r3, [pc, #20]	; (8002124 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	0a9b      	lsrs	r3, r3, #10
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	4a03      	ldr	r2, [pc, #12]	; (8002128 <HAL_RCC_GetPCLK1Freq+0x24>)
 800211a:	5cd3      	ldrb	r3, [r2, r3]
 800211c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002120:	4618      	mov	r0, r3
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40023800 	.word	0x40023800
 8002128:	08003078 	.word	0x08003078

0800212c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002130:	f7ff ffdc 	bl	80020ec <HAL_RCC_GetHCLKFreq>
 8002134:	4601      	mov	r1, r0
 8002136:	4b05      	ldr	r3, [pc, #20]	; (800214c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	0b5b      	lsrs	r3, r3, #13
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	4a03      	ldr	r2, [pc, #12]	; (8002150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002142:	5cd3      	ldrb	r3, [r2, r3]
 8002144:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002148:	4618      	mov	r0, r3
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40023800 	.word	0x40023800
 8002150:	08003078 	.word	0x08003078

08002154 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e03f      	b.n	80021e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d106      	bne.n	8002180 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7fe fc24 	bl	80009c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2224      	movs	r2, #36	; 0x24
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	68d2      	ldr	r2, [r2, #12]
 8002192:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002196:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f927 	bl	80023ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6812      	ldr	r2, [r2, #0]
 80021a6:	6912      	ldr	r2, [r2, #16]
 80021a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	6952      	ldr	r2, [r2, #20]
 80021b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6812      	ldr	r2, [r2, #0]
 80021c6:	68d2      	ldr	r2, [r2, #12]
 80021c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2220      	movs	r2, #32
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b08a      	sub	sp, #40	; 0x28
 80021f2:	af02      	add	r7, sp, #8
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	603b      	str	r3, [r7, #0]
 80021fa:	4613      	mov	r3, r2
 80021fc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b20      	cmp	r3, #32
 800220c:	d17b      	bne.n	8002306 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d002      	beq.n	800221a <HAL_UART_Transmit+0x2c>
 8002214:	88fb      	ldrh	r3, [r7, #6]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e074      	b.n	8002308 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <HAL_UART_Transmit+0x3e>
 8002228:	2302      	movs	r3, #2
 800222a:	e06d      	b.n	8002308 <HAL_UART_Transmit+0x11a>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2221      	movs	r2, #33	; 0x21
 800223e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002242:	f7fe fc6f 	bl	8000b24 <HAL_GetTick>
 8002246:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	88fa      	ldrh	r2, [r7, #6]
 800224c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	88fa      	ldrh	r2, [r7, #6]
 8002252:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800225c:	d108      	bne.n	8002270 <HAL_UART_Transmit+0x82>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d104      	bne.n	8002270 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002266:	2300      	movs	r3, #0
 8002268:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	61bb      	str	r3, [r7, #24]
 800226e:	e003      	b.n	8002278 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002274:	2300      	movs	r3, #0
 8002276:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002280:	e029      	b.n	80022d6 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	2200      	movs	r2, #0
 800228a:	2180      	movs	r1, #128	; 0x80
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f000 f83f 	bl	8002310 <UART_WaitOnFlagUntilTimeout>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e035      	b.n	8002308 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10a      	bne.n	80022b8 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	8812      	ldrh	r2, [r2, #0]
 80022aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022ae:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	3302      	adds	r3, #2
 80022b4:	61bb      	str	r3, [r7, #24]
 80022b6:	e007      	b.n	80022c8 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	69fa      	ldr	r2, [r7, #28]
 80022be:	7812      	ldrb	r2, [r2, #0]
 80022c0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3301      	adds	r3, #1
 80022c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022da:	b29b      	uxth	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1d0      	bne.n	8002282 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	2200      	movs	r2, #0
 80022e8:	2140      	movs	r1, #64	; 0x40
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 f810 	bl	8002310 <UART_WaitOnFlagUntilTimeout>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_UART_Transmit+0x10c>
    {
      return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e006      	b.n	8002308 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2220      	movs	r2, #32
 80022fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002302:	2300      	movs	r3, #0
 8002304:	e000      	b.n	8002308 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8002306:	2302      	movs	r3, #2
  }
}
 8002308:	4618      	mov	r0, r3
 800230a:	3720      	adds	r7, #32
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b090      	sub	sp, #64	; 0x40
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	4613      	mov	r3, r2
 800231e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002320:	e050      	b.n	80023c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002328:	d04c      	beq.n	80023c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800232a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800232c:	2b00      	cmp	r3, #0
 800232e:	d007      	beq.n	8002340 <UART_WaitOnFlagUntilTimeout+0x30>
 8002330:	f7fe fbf8 	bl	8000b24 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	1ad2      	subs	r2, r2, r3
 800233a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800233c:	429a      	cmp	r2, r3
 800233e:	d941      	bls.n	80023c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	330c      	adds	r3, #12
 8002346:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234a:	e853 3f00 	ldrex	r3, [r3]
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	330c      	adds	r3, #12
 800235e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002360:	637a      	str	r2, [r7, #52]	; 0x34
 8002362:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002364:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002366:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002368:	e841 2300 	strex	r3, r2, [r1]
 800236c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800236e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1e5      	bne.n	8002340 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	3314      	adds	r3, #20
 800237a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	e853 3f00 	ldrex	r3, [r3]
 8002382:	613b      	str	r3, [r7, #16]
   return(result);
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	f023 0301 	bic.w	r3, r3, #1
 800238a:	63bb      	str	r3, [r7, #56]	; 0x38
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	3314      	adds	r3, #20
 8002392:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002394:	623a      	str	r2, [r7, #32]
 8002396:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002398:	69f9      	ldr	r1, [r7, #28]
 800239a:	6a3a      	ldr	r2, [r7, #32]
 800239c:	e841 2300 	strex	r3, r2, [r1]
 80023a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1e5      	bne.n	8002374 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2220      	movs	r2, #32
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2220      	movs	r2, #32
 80023b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e00f      	b.n	80023e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	401a      	ands	r2, r3
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	bf0c      	ite	eq
 80023d4:	2301      	moveq	r3, #1
 80023d6:	2300      	movne	r3, #0
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	461a      	mov	r2, r3
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d09f      	beq.n	8002322 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3740      	adds	r7, #64	; 0x40
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023f0:	b091      	sub	sp, #68	; 0x44
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6378      	str	r0, [r7, #52]	; 0x34
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f8:	6819      	ldr	r1, [r3, #0]
 80023fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4313      	orrs	r3, r2
 800240a:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800240c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	431a      	orrs	r2, r3
 8002416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	431a      	orrs	r2, r3
 800241c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	4313      	orrs	r3, r2
 8002422:	63bb      	str	r3, [r7, #56]	; 0x38
  MODIFY_REG(huart->Instance->CR1,
 8002424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002426:	6819      	ldr	r1, [r3, #0]
 8002428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 8002432:	f022 020c 	bic.w	r2, r2, #12
 8002436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002438:	4313      	orrs	r3, r2
 800243a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800243c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243e:	6819      	ldr	r1, [r3, #0]
 8002440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800244a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	4313      	orrs	r3, r2
 8002450:	614b      	str	r3, [r1, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	4bba      	ldr	r3, [pc, #744]	; (8002740 <UART_SetConfig+0x354>)
 8002458:	429a      	cmp	r2, r3
 800245a:	d004      	beq.n	8002466 <UART_SetConfig+0x7a>
 800245c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4bb8      	ldr	r3, [pc, #736]	; (8002744 <UART_SetConfig+0x358>)
 8002462:	429a      	cmp	r2, r3
 8002464:	d103      	bne.n	800246e <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002466:	f7ff fe61 	bl	800212c <HAL_RCC_GetPCLK2Freq>
 800246a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800246c:	e002      	b.n	8002474 <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800246e:	f7ff fe49 	bl	8002104 <HAL_RCC_GetPCLK1Freq>
 8002472:	63f8      	str	r0, [r7, #60]	; 0x3c
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800247c:	f040 80a7 	bne.w	80025ce <UART_SetConfig+0x1e2>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	62ba      	str	r2, [r7, #40]	; 0x28
 8002486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002488:	4619      	mov	r1, r3
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	460b      	mov	r3, r1
 8002490:	4614      	mov	r4, r2
 8002492:	18db      	adds	r3, r3, r3
 8002494:	eb44 0404 	adc.w	r4, r4, r4
 8002498:	185b      	adds	r3, r3, r1
 800249a:	eb44 0402 	adc.w	r4, r4, r2
 800249e:	00e0      	lsls	r0, r4, #3
 80024a0:	6178      	str	r0, [r7, #20]
 80024a2:	6978      	ldr	r0, [r7, #20]
 80024a4:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80024a8:	6178      	str	r0, [r7, #20]
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80024b2:	185d      	adds	r5, r3, r1
 80024b4:	eb44 0602 	adc.w	r6, r4, r2
 80024b8:	4628      	mov	r0, r5
 80024ba:	4631      	mov	r1, r6
 80024bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f04f 0400 	mov.w	r4, #0
 80024c4:	18db      	adds	r3, r3, r3
 80024c6:	eb44 0404 	adc.w	r4, r4, r4
 80024ca:	461a      	mov	r2, r3
 80024cc:	4623      	mov	r3, r4
 80024ce:	f7fd fecf 	bl	8000270 <__aeabi_uldivmod>
 80024d2:	4603      	mov	r3, r0
 80024d4:	460c      	mov	r4, r1
 80024d6:	461a      	mov	r2, r3
 80024d8:	4b9b      	ldr	r3, [pc, #620]	; (8002748 <UART_SetConfig+0x35c>)
 80024da:	fba3 2302 	umull	r2, r3, r3, r2
 80024de:	095b      	lsrs	r3, r3, #5
 80024e0:	011e      	lsls	r6, r3, #4
 80024e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024e4:	4619      	mov	r1, r3
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	460b      	mov	r3, r1
 80024ec:	4614      	mov	r4, r2
 80024ee:	18db      	adds	r3, r3, r3
 80024f0:	eb44 0404 	adc.w	r4, r4, r4
 80024f4:	185b      	adds	r3, r3, r1
 80024f6:	eb44 0402 	adc.w	r4, r4, r2
 80024fa:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 80024fe:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 8002502:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8002506:	4653      	mov	r3, sl
 8002508:	465c      	mov	r4, fp
 800250a:	eb13 0a01 	adds.w	sl, r3, r1
 800250e:	eb44 0b02 	adc.w	fp, r4, r2
 8002512:	4650      	mov	r0, sl
 8002514:	4659      	mov	r1, fp
 8002516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f04f 0400 	mov.w	r4, #0
 800251e:	18db      	adds	r3, r3, r3
 8002520:	eb44 0404 	adc.w	r4, r4, r4
 8002524:	461a      	mov	r2, r3
 8002526:	4623      	mov	r3, r4
 8002528:	f7fd fea2 	bl	8000270 <__aeabi_uldivmod>
 800252c:	4603      	mov	r3, r0
 800252e:	460c      	mov	r4, r1
 8002530:	461a      	mov	r2, r3
 8002532:	4b85      	ldr	r3, [pc, #532]	; (8002748 <UART_SetConfig+0x35c>)
 8002534:	fba3 1302 	umull	r1, r3, r3, r2
 8002538:	095b      	lsrs	r3, r3, #5
 800253a:	2164      	movs	r1, #100	; 0x64
 800253c:	fb01 f303 	mul.w	r3, r1, r3
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	3332      	adds	r3, #50	; 0x32
 8002546:	4a80      	ldr	r2, [pc, #512]	; (8002748 <UART_SetConfig+0x35c>)
 8002548:	fba2 2303 	umull	r2, r3, r2, r3
 800254c:	095b      	lsrs	r3, r3, #5
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002554:	441e      	add	r6, r3
 8002556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002558:	4619      	mov	r1, r3
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	460b      	mov	r3, r1
 8002560:	4614      	mov	r4, r2
 8002562:	18db      	adds	r3, r3, r3
 8002564:	eb44 0404 	adc.w	r4, r4, r4
 8002568:	185b      	adds	r3, r3, r1
 800256a:	eb44 0402 	adc.w	r4, r4, r2
 800256e:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8002572:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8002576:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 800257a:	4643      	mov	r3, r8
 800257c:	464c      	mov	r4, r9
 800257e:	eb13 0801 	adds.w	r8, r3, r1
 8002582:	eb44 0902 	adc.w	r9, r4, r2
 8002586:	4640      	mov	r0, r8
 8002588:	4649      	mov	r1, r9
 800258a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f04f 0400 	mov.w	r4, #0
 8002592:	18db      	adds	r3, r3, r3
 8002594:	eb44 0404 	adc.w	r4, r4, r4
 8002598:	461a      	mov	r2, r3
 800259a:	4623      	mov	r3, r4
 800259c:	f7fd fe68 	bl	8000270 <__aeabi_uldivmod>
 80025a0:	4603      	mov	r3, r0
 80025a2:	460c      	mov	r4, r1
 80025a4:	461a      	mov	r2, r3
 80025a6:	4b68      	ldr	r3, [pc, #416]	; (8002748 <UART_SetConfig+0x35c>)
 80025a8:	fba3 1302 	umull	r1, r3, r3, r2
 80025ac:	095b      	lsrs	r3, r3, #5
 80025ae:	2164      	movs	r1, #100	; 0x64
 80025b0:	fb01 f303 	mul.w	r3, r1, r3
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	3332      	adds	r3, #50	; 0x32
 80025ba:	4a63      	ldr	r2, [pc, #396]	; (8002748 <UART_SetConfig+0x35c>)
 80025bc:	fba2 2303 	umull	r2, r3, r2, r3
 80025c0:	095b      	lsrs	r3, r3, #5
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	4433      	add	r3, r6
 80025c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025ca:	6093      	str	r3, [r2, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80025cc:	e0b3      	b.n	8002736 <UART_SetConfig+0x34a>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025d6:	4619      	mov	r1, r3
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	460b      	mov	r3, r1
 80025de:	4614      	mov	r4, r2
 80025e0:	18db      	adds	r3, r3, r3
 80025e2:	eb44 0404 	adc.w	r4, r4, r4
 80025e6:	185b      	adds	r3, r3, r1
 80025e8:	eb44 0402 	adc.w	r4, r4, r2
 80025ec:	00e6      	lsls	r6, r4, #3
 80025ee:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 80025f2:	00dd      	lsls	r5, r3, #3
 80025f4:	462b      	mov	r3, r5
 80025f6:	4634      	mov	r4, r6
 80025f8:	185d      	adds	r5, r3, r1
 80025fa:	eb44 0602 	adc.w	r6, r4, r2
 80025fe:	4628      	mov	r0, r5
 8002600:	4631      	mov	r1, r6
 8002602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f04f 0400 	mov.w	r4, #0
 800260a:	00a5      	lsls	r5, r4, #2
 800260c:	62fd      	str	r5, [r7, #44]	; 0x2c
 800260e:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8002610:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 8002614:	62fd      	str	r5, [r7, #44]	; 0x2c
 8002616:	009c      	lsls	r4, r3, #2
 8002618:	62bc      	str	r4, [r7, #40]	; 0x28
 800261a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800261e:	f7fd fe27 	bl	8000270 <__aeabi_uldivmod>
 8002622:	4603      	mov	r3, r0
 8002624:	460c      	mov	r4, r1
 8002626:	461a      	mov	r2, r3
 8002628:	4b47      	ldr	r3, [pc, #284]	; (8002748 <UART_SetConfig+0x35c>)
 800262a:	fba3 1302 	umull	r1, r3, r3, r2
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	011d      	lsls	r5, r3, #4
 8002632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002634:	4619      	mov	r1, r3
 8002636:	f04f 0200 	mov.w	r2, #0
 800263a:	460b      	mov	r3, r1
 800263c:	4614      	mov	r4, r2
 800263e:	18db      	adds	r3, r3, r3
 8002640:	eb44 0404 	adc.w	r4, r4, r4
 8002644:	185b      	adds	r3, r3, r1
 8002646:	eb44 0402 	adc.w	r4, r4, r2
 800264a:	00e0      	lsls	r0, r4, #3
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	00d8      	lsls	r0, r3, #3
 8002658:	60b8      	str	r0, [r7, #8]
 800265a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800265e:	eb13 0801 	adds.w	r8, r3, r1
 8002662:	eb44 0902 	adc.w	r9, r4, r2
 8002666:	4640      	mov	r0, r8
 8002668:	4649      	mov	r1, r9
 800266a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f04f 0400 	mov.w	r4, #0
 8002672:	00a6      	lsls	r6, r4, #2
 8002674:	627e      	str	r6, [r7, #36]	; 0x24
 8002676:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8002678:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 800267c:	627e      	str	r6, [r7, #36]	; 0x24
 800267e:	009c      	lsls	r4, r3, #2
 8002680:	623c      	str	r4, [r7, #32]
 8002682:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002686:	f7fd fdf3 	bl	8000270 <__aeabi_uldivmod>
 800268a:	4603      	mov	r3, r0
 800268c:	460c      	mov	r4, r1
 800268e:	461a      	mov	r2, r3
 8002690:	4b2d      	ldr	r3, [pc, #180]	; (8002748 <UART_SetConfig+0x35c>)
 8002692:	fba3 1302 	umull	r1, r3, r3, r2
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	2164      	movs	r1, #100	; 0x64
 800269a:	fb01 f303 	mul.w	r3, r1, r3
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	3332      	adds	r3, #50	; 0x32
 80026a4:	4a28      	ldr	r2, [pc, #160]	; (8002748 <UART_SetConfig+0x35c>)
 80026a6:	fba2 1303 	umull	r1, r3, r2, r3
 80026aa:	095b      	lsrs	r3, r3, #5
 80026ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026b0:	441d      	add	r5, r3
 80026b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026b4:	4619      	mov	r1, r3
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4614      	mov	r4, r2
 80026be:	18db      	adds	r3, r3, r3
 80026c0:	eb44 0404 	adc.w	r4, r4, r4
 80026c4:	185b      	adds	r3, r3, r1
 80026c6:	eb44 0402 	adc.w	r4, r4, r2
 80026ca:	00e0      	lsls	r0, r4, #3
 80026cc:	6078      	str	r0, [r7, #4]
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80026d4:	6078      	str	r0, [r7, #4]
 80026d6:	00d8      	lsls	r0, r3, #3
 80026d8:	6038      	str	r0, [r7, #0]
 80026da:	e897 0018 	ldmia.w	r7, {r3, r4}
 80026de:	eb13 0801 	adds.w	r8, r3, r1
 80026e2:	eb44 0902 	adc.w	r9, r4, r2
 80026e6:	4640      	mov	r0, r8
 80026e8:	4649      	mov	r1, r9
 80026ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f04f 0400 	mov.w	r4, #0
 80026f2:	00a6      	lsls	r6, r4, #2
 80026f4:	61fe      	str	r6, [r7, #28]
 80026f6:	69fe      	ldr	r6, [r7, #28]
 80026f8:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 80026fc:	61fe      	str	r6, [r7, #28]
 80026fe:	009c      	lsls	r4, r3, #2
 8002700:	61bc      	str	r4, [r7, #24]
 8002702:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002706:	f7fd fdb3 	bl	8000270 <__aeabi_uldivmod>
 800270a:	4603      	mov	r3, r0
 800270c:	460c      	mov	r4, r1
 800270e:	461a      	mov	r2, r3
 8002710:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <UART_SetConfig+0x35c>)
 8002712:	fba3 1302 	umull	r1, r3, r3, r2
 8002716:	095b      	lsrs	r3, r3, #5
 8002718:	2164      	movs	r1, #100	; 0x64
 800271a:	fb01 f303 	mul.w	r3, r1, r3
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	011b      	lsls	r3, r3, #4
 8002722:	3332      	adds	r3, #50	; 0x32
 8002724:	4a08      	ldr	r2, [pc, #32]	; (8002748 <UART_SetConfig+0x35c>)
 8002726:	fba2 1303 	umull	r1, r3, r2, r3
 800272a:	095b      	lsrs	r3, r3, #5
 800272c:	f003 030f 	and.w	r3, r3, #15
 8002730:	442b      	add	r3, r5
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	6093      	str	r3, [r2, #8]
}
 8002736:	bf00      	nop
 8002738:	3744      	adds	r7, #68	; 0x44
 800273a:	46bd      	mov	sp, r7
 800273c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002740:	40011000 	.word	0x40011000
 8002744:	40011400 	.word	0x40011400
 8002748:	51eb851f 	.word	0x51eb851f

0800274c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800274c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002784 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002750:	480d      	ldr	r0, [pc, #52]	; (8002788 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002752:	490e      	ldr	r1, [pc, #56]	; (800278c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002754:	4a0e      	ldr	r2, [pc, #56]	; (8002790 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002758:	e002      	b.n	8002760 <LoopCopyDataInit>

0800275a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800275a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800275c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800275e:	3304      	adds	r3, #4

08002760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002764:	d3f9      	bcc.n	800275a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002766:	4a0b      	ldr	r2, [pc, #44]	; (8002794 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002768:	4c0b      	ldr	r4, [pc, #44]	; (8002798 <LoopFillZerobss+0x26>)
  movs r3, #0
 800276a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800276c:	e001      	b.n	8002772 <LoopFillZerobss>

0800276e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800276e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002770:	3204      	adds	r2, #4

08002772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002774:	d3fb      	bcc.n	800276e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002776:	f7fe f8eb 	bl	8000950 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800277a:	f000 f817 	bl	80027ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800277e:	f7fd ffbd 	bl	80006fc <main>
  bx  lr    
 8002782:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002784:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800278c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002790:	080030c4 	.word	0x080030c4
  ldr r2, =_sbss
 8002794:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002798:	20000144 	.word	0x20000144

0800279c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800279c:	e7fe      	b.n	800279c <ADC_IRQHandler>
	...

080027a0 <__errno>:
 80027a0:	4b01      	ldr	r3, [pc, #4]	; (80027a8 <__errno+0x8>)
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	2000000c 	.word	0x2000000c

080027ac <__libc_init_array>:
 80027ac:	b570      	push	{r4, r5, r6, lr}
 80027ae:	4e0d      	ldr	r6, [pc, #52]	; (80027e4 <__libc_init_array+0x38>)
 80027b0:	4c0d      	ldr	r4, [pc, #52]	; (80027e8 <__libc_init_array+0x3c>)
 80027b2:	1ba4      	subs	r4, r4, r6
 80027b4:	10a4      	asrs	r4, r4, #2
 80027b6:	2500      	movs	r5, #0
 80027b8:	42a5      	cmp	r5, r4
 80027ba:	d109      	bne.n	80027d0 <__libc_init_array+0x24>
 80027bc:	4e0b      	ldr	r6, [pc, #44]	; (80027ec <__libc_init_array+0x40>)
 80027be:	4c0c      	ldr	r4, [pc, #48]	; (80027f0 <__libc_init_array+0x44>)
 80027c0:	f000 fc3e 	bl	8003040 <_init>
 80027c4:	1ba4      	subs	r4, r4, r6
 80027c6:	10a4      	asrs	r4, r4, #2
 80027c8:	2500      	movs	r5, #0
 80027ca:	42a5      	cmp	r5, r4
 80027cc:	d105      	bne.n	80027da <__libc_init_array+0x2e>
 80027ce:	bd70      	pop	{r4, r5, r6, pc}
 80027d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027d4:	4798      	blx	r3
 80027d6:	3501      	adds	r5, #1
 80027d8:	e7ee      	b.n	80027b8 <__libc_init_array+0xc>
 80027da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027de:	4798      	blx	r3
 80027e0:	3501      	adds	r5, #1
 80027e2:	e7f2      	b.n	80027ca <__libc_init_array+0x1e>
 80027e4:	080030bc 	.word	0x080030bc
 80027e8:	080030bc 	.word	0x080030bc
 80027ec:	080030bc 	.word	0x080030bc
 80027f0:	080030c0 	.word	0x080030c0

080027f4 <memset>:
 80027f4:	4402      	add	r2, r0
 80027f6:	4603      	mov	r3, r0
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d100      	bne.n	80027fe <memset+0xa>
 80027fc:	4770      	bx	lr
 80027fe:	f803 1b01 	strb.w	r1, [r3], #1
 8002802:	e7f9      	b.n	80027f8 <memset+0x4>

08002804 <siprintf>:
 8002804:	b40e      	push	{r1, r2, r3}
 8002806:	b500      	push	{lr}
 8002808:	b09c      	sub	sp, #112	; 0x70
 800280a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800280e:	ab1d      	add	r3, sp, #116	; 0x74
 8002810:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002814:	9002      	str	r0, [sp, #8]
 8002816:	9006      	str	r0, [sp, #24]
 8002818:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800281c:	480a      	ldr	r0, [pc, #40]	; (8002848 <siprintf+0x44>)
 800281e:	9104      	str	r1, [sp, #16]
 8002820:	9107      	str	r1, [sp, #28]
 8002822:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002826:	f853 2b04 	ldr.w	r2, [r3], #4
 800282a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800282e:	6800      	ldr	r0, [r0, #0]
 8002830:	9301      	str	r3, [sp, #4]
 8002832:	a902      	add	r1, sp, #8
 8002834:	f000 f866 	bl	8002904 <_svfiprintf_r>
 8002838:	9b02      	ldr	r3, [sp, #8]
 800283a:	2200      	movs	r2, #0
 800283c:	701a      	strb	r2, [r3, #0]
 800283e:	b01c      	add	sp, #112	; 0x70
 8002840:	f85d eb04 	ldr.w	lr, [sp], #4
 8002844:	b003      	add	sp, #12
 8002846:	4770      	bx	lr
 8002848:	2000000c 	.word	0x2000000c

0800284c <__ssputs_r>:
 800284c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002850:	688e      	ldr	r6, [r1, #8]
 8002852:	429e      	cmp	r6, r3
 8002854:	4682      	mov	sl, r0
 8002856:	460c      	mov	r4, r1
 8002858:	4691      	mov	r9, r2
 800285a:	4698      	mov	r8, r3
 800285c:	d835      	bhi.n	80028ca <__ssputs_r+0x7e>
 800285e:	898a      	ldrh	r2, [r1, #12]
 8002860:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002864:	d031      	beq.n	80028ca <__ssputs_r+0x7e>
 8002866:	6825      	ldr	r5, [r4, #0]
 8002868:	6909      	ldr	r1, [r1, #16]
 800286a:	1a6f      	subs	r7, r5, r1
 800286c:	6965      	ldr	r5, [r4, #20]
 800286e:	2302      	movs	r3, #2
 8002870:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002874:	fb95 f5f3 	sdiv	r5, r5, r3
 8002878:	f108 0301 	add.w	r3, r8, #1
 800287c:	443b      	add	r3, r7
 800287e:	429d      	cmp	r5, r3
 8002880:	bf38      	it	cc
 8002882:	461d      	movcc	r5, r3
 8002884:	0553      	lsls	r3, r2, #21
 8002886:	d531      	bpl.n	80028ec <__ssputs_r+0xa0>
 8002888:	4629      	mov	r1, r5
 800288a:	f000 fb39 	bl	8002f00 <_malloc_r>
 800288e:	4606      	mov	r6, r0
 8002890:	b950      	cbnz	r0, 80028a8 <__ssputs_r+0x5c>
 8002892:	230c      	movs	r3, #12
 8002894:	f8ca 3000 	str.w	r3, [sl]
 8002898:	89a3      	ldrh	r3, [r4, #12]
 800289a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800289e:	81a3      	strh	r3, [r4, #12]
 80028a0:	f04f 30ff 	mov.w	r0, #4294967295
 80028a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028a8:	463a      	mov	r2, r7
 80028aa:	6921      	ldr	r1, [r4, #16]
 80028ac:	f000 fab4 	bl	8002e18 <memcpy>
 80028b0:	89a3      	ldrh	r3, [r4, #12]
 80028b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80028b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ba:	81a3      	strh	r3, [r4, #12]
 80028bc:	6126      	str	r6, [r4, #16]
 80028be:	6165      	str	r5, [r4, #20]
 80028c0:	443e      	add	r6, r7
 80028c2:	1bed      	subs	r5, r5, r7
 80028c4:	6026      	str	r6, [r4, #0]
 80028c6:	60a5      	str	r5, [r4, #8]
 80028c8:	4646      	mov	r6, r8
 80028ca:	4546      	cmp	r6, r8
 80028cc:	bf28      	it	cs
 80028ce:	4646      	movcs	r6, r8
 80028d0:	4632      	mov	r2, r6
 80028d2:	4649      	mov	r1, r9
 80028d4:	6820      	ldr	r0, [r4, #0]
 80028d6:	f000 faaa 	bl	8002e2e <memmove>
 80028da:	68a3      	ldr	r3, [r4, #8]
 80028dc:	1b9b      	subs	r3, r3, r6
 80028de:	60a3      	str	r3, [r4, #8]
 80028e0:	6823      	ldr	r3, [r4, #0]
 80028e2:	441e      	add	r6, r3
 80028e4:	6026      	str	r6, [r4, #0]
 80028e6:	2000      	movs	r0, #0
 80028e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028ec:	462a      	mov	r2, r5
 80028ee:	f000 fb65 	bl	8002fbc <_realloc_r>
 80028f2:	4606      	mov	r6, r0
 80028f4:	2800      	cmp	r0, #0
 80028f6:	d1e1      	bne.n	80028bc <__ssputs_r+0x70>
 80028f8:	6921      	ldr	r1, [r4, #16]
 80028fa:	4650      	mov	r0, sl
 80028fc:	f000 fab2 	bl	8002e64 <_free_r>
 8002900:	e7c7      	b.n	8002892 <__ssputs_r+0x46>
	...

08002904 <_svfiprintf_r>:
 8002904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002908:	b09d      	sub	sp, #116	; 0x74
 800290a:	4680      	mov	r8, r0
 800290c:	9303      	str	r3, [sp, #12]
 800290e:	898b      	ldrh	r3, [r1, #12]
 8002910:	061c      	lsls	r4, r3, #24
 8002912:	460d      	mov	r5, r1
 8002914:	4616      	mov	r6, r2
 8002916:	d50f      	bpl.n	8002938 <_svfiprintf_r+0x34>
 8002918:	690b      	ldr	r3, [r1, #16]
 800291a:	b96b      	cbnz	r3, 8002938 <_svfiprintf_r+0x34>
 800291c:	2140      	movs	r1, #64	; 0x40
 800291e:	f000 faef 	bl	8002f00 <_malloc_r>
 8002922:	6028      	str	r0, [r5, #0]
 8002924:	6128      	str	r0, [r5, #16]
 8002926:	b928      	cbnz	r0, 8002934 <_svfiprintf_r+0x30>
 8002928:	230c      	movs	r3, #12
 800292a:	f8c8 3000 	str.w	r3, [r8]
 800292e:	f04f 30ff 	mov.w	r0, #4294967295
 8002932:	e0c5      	b.n	8002ac0 <_svfiprintf_r+0x1bc>
 8002934:	2340      	movs	r3, #64	; 0x40
 8002936:	616b      	str	r3, [r5, #20]
 8002938:	2300      	movs	r3, #0
 800293a:	9309      	str	r3, [sp, #36]	; 0x24
 800293c:	2320      	movs	r3, #32
 800293e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002942:	2330      	movs	r3, #48	; 0x30
 8002944:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002948:	f04f 0b01 	mov.w	fp, #1
 800294c:	4637      	mov	r7, r6
 800294e:	463c      	mov	r4, r7
 8002950:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002954:	2b00      	cmp	r3, #0
 8002956:	d13c      	bne.n	80029d2 <_svfiprintf_r+0xce>
 8002958:	ebb7 0a06 	subs.w	sl, r7, r6
 800295c:	d00b      	beq.n	8002976 <_svfiprintf_r+0x72>
 800295e:	4653      	mov	r3, sl
 8002960:	4632      	mov	r2, r6
 8002962:	4629      	mov	r1, r5
 8002964:	4640      	mov	r0, r8
 8002966:	f7ff ff71 	bl	800284c <__ssputs_r>
 800296a:	3001      	adds	r0, #1
 800296c:	f000 80a3 	beq.w	8002ab6 <_svfiprintf_r+0x1b2>
 8002970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002972:	4453      	add	r3, sl
 8002974:	9309      	str	r3, [sp, #36]	; 0x24
 8002976:	783b      	ldrb	r3, [r7, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 809c 	beq.w	8002ab6 <_svfiprintf_r+0x1b2>
 800297e:	2300      	movs	r3, #0
 8002980:	f04f 32ff 	mov.w	r2, #4294967295
 8002984:	9304      	str	r3, [sp, #16]
 8002986:	9307      	str	r3, [sp, #28]
 8002988:	9205      	str	r2, [sp, #20]
 800298a:	9306      	str	r3, [sp, #24]
 800298c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002990:	931a      	str	r3, [sp, #104]	; 0x68
 8002992:	2205      	movs	r2, #5
 8002994:	7821      	ldrb	r1, [r4, #0]
 8002996:	4850      	ldr	r0, [pc, #320]	; (8002ad8 <_svfiprintf_r+0x1d4>)
 8002998:	f7fd fc1a 	bl	80001d0 <memchr>
 800299c:	1c67      	adds	r7, r4, #1
 800299e:	9b04      	ldr	r3, [sp, #16]
 80029a0:	b9d8      	cbnz	r0, 80029da <_svfiprintf_r+0xd6>
 80029a2:	06d9      	lsls	r1, r3, #27
 80029a4:	bf44      	itt	mi
 80029a6:	2220      	movmi	r2, #32
 80029a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80029ac:	071a      	lsls	r2, r3, #28
 80029ae:	bf44      	itt	mi
 80029b0:	222b      	movmi	r2, #43	; 0x2b
 80029b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80029b6:	7822      	ldrb	r2, [r4, #0]
 80029b8:	2a2a      	cmp	r2, #42	; 0x2a
 80029ba:	d016      	beq.n	80029ea <_svfiprintf_r+0xe6>
 80029bc:	9a07      	ldr	r2, [sp, #28]
 80029be:	2100      	movs	r1, #0
 80029c0:	200a      	movs	r0, #10
 80029c2:	4627      	mov	r7, r4
 80029c4:	3401      	adds	r4, #1
 80029c6:	783b      	ldrb	r3, [r7, #0]
 80029c8:	3b30      	subs	r3, #48	; 0x30
 80029ca:	2b09      	cmp	r3, #9
 80029cc:	d951      	bls.n	8002a72 <_svfiprintf_r+0x16e>
 80029ce:	b1c9      	cbz	r1, 8002a04 <_svfiprintf_r+0x100>
 80029d0:	e011      	b.n	80029f6 <_svfiprintf_r+0xf2>
 80029d2:	2b25      	cmp	r3, #37	; 0x25
 80029d4:	d0c0      	beq.n	8002958 <_svfiprintf_r+0x54>
 80029d6:	4627      	mov	r7, r4
 80029d8:	e7b9      	b.n	800294e <_svfiprintf_r+0x4a>
 80029da:	4a3f      	ldr	r2, [pc, #252]	; (8002ad8 <_svfiprintf_r+0x1d4>)
 80029dc:	1a80      	subs	r0, r0, r2
 80029de:	fa0b f000 	lsl.w	r0, fp, r0
 80029e2:	4318      	orrs	r0, r3
 80029e4:	9004      	str	r0, [sp, #16]
 80029e6:	463c      	mov	r4, r7
 80029e8:	e7d3      	b.n	8002992 <_svfiprintf_r+0x8e>
 80029ea:	9a03      	ldr	r2, [sp, #12]
 80029ec:	1d11      	adds	r1, r2, #4
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	9103      	str	r1, [sp, #12]
 80029f2:	2a00      	cmp	r2, #0
 80029f4:	db01      	blt.n	80029fa <_svfiprintf_r+0xf6>
 80029f6:	9207      	str	r2, [sp, #28]
 80029f8:	e004      	b.n	8002a04 <_svfiprintf_r+0x100>
 80029fa:	4252      	negs	r2, r2
 80029fc:	f043 0302 	orr.w	r3, r3, #2
 8002a00:	9207      	str	r2, [sp, #28]
 8002a02:	9304      	str	r3, [sp, #16]
 8002a04:	783b      	ldrb	r3, [r7, #0]
 8002a06:	2b2e      	cmp	r3, #46	; 0x2e
 8002a08:	d10e      	bne.n	8002a28 <_svfiprintf_r+0x124>
 8002a0a:	787b      	ldrb	r3, [r7, #1]
 8002a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8002a0e:	f107 0101 	add.w	r1, r7, #1
 8002a12:	d132      	bne.n	8002a7a <_svfiprintf_r+0x176>
 8002a14:	9b03      	ldr	r3, [sp, #12]
 8002a16:	1d1a      	adds	r2, r3, #4
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	9203      	str	r2, [sp, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	bfb8      	it	lt
 8002a20:	f04f 33ff 	movlt.w	r3, #4294967295
 8002a24:	3702      	adds	r7, #2
 8002a26:	9305      	str	r3, [sp, #20]
 8002a28:	4c2c      	ldr	r4, [pc, #176]	; (8002adc <_svfiprintf_r+0x1d8>)
 8002a2a:	7839      	ldrb	r1, [r7, #0]
 8002a2c:	2203      	movs	r2, #3
 8002a2e:	4620      	mov	r0, r4
 8002a30:	f7fd fbce 	bl	80001d0 <memchr>
 8002a34:	b138      	cbz	r0, 8002a46 <_svfiprintf_r+0x142>
 8002a36:	2340      	movs	r3, #64	; 0x40
 8002a38:	1b00      	subs	r0, r0, r4
 8002a3a:	fa03 f000 	lsl.w	r0, r3, r0
 8002a3e:	9b04      	ldr	r3, [sp, #16]
 8002a40:	4303      	orrs	r3, r0
 8002a42:	9304      	str	r3, [sp, #16]
 8002a44:	3701      	adds	r7, #1
 8002a46:	7839      	ldrb	r1, [r7, #0]
 8002a48:	4825      	ldr	r0, [pc, #148]	; (8002ae0 <_svfiprintf_r+0x1dc>)
 8002a4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a4e:	2206      	movs	r2, #6
 8002a50:	1c7e      	adds	r6, r7, #1
 8002a52:	f7fd fbbd 	bl	80001d0 <memchr>
 8002a56:	2800      	cmp	r0, #0
 8002a58:	d035      	beq.n	8002ac6 <_svfiprintf_r+0x1c2>
 8002a5a:	4b22      	ldr	r3, [pc, #136]	; (8002ae4 <_svfiprintf_r+0x1e0>)
 8002a5c:	b9fb      	cbnz	r3, 8002a9e <_svfiprintf_r+0x19a>
 8002a5e:	9b03      	ldr	r3, [sp, #12]
 8002a60:	3307      	adds	r3, #7
 8002a62:	f023 0307 	bic.w	r3, r3, #7
 8002a66:	3308      	adds	r3, #8
 8002a68:	9303      	str	r3, [sp, #12]
 8002a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a6c:	444b      	add	r3, r9
 8002a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8002a70:	e76c      	b.n	800294c <_svfiprintf_r+0x48>
 8002a72:	fb00 3202 	mla	r2, r0, r2, r3
 8002a76:	2101      	movs	r1, #1
 8002a78:	e7a3      	b.n	80029c2 <_svfiprintf_r+0xbe>
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	9305      	str	r3, [sp, #20]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	240a      	movs	r4, #10
 8002a82:	460f      	mov	r7, r1
 8002a84:	3101      	adds	r1, #1
 8002a86:	783a      	ldrb	r2, [r7, #0]
 8002a88:	3a30      	subs	r2, #48	; 0x30
 8002a8a:	2a09      	cmp	r2, #9
 8002a8c:	d903      	bls.n	8002a96 <_svfiprintf_r+0x192>
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0ca      	beq.n	8002a28 <_svfiprintf_r+0x124>
 8002a92:	9005      	str	r0, [sp, #20]
 8002a94:	e7c8      	b.n	8002a28 <_svfiprintf_r+0x124>
 8002a96:	fb04 2000 	mla	r0, r4, r0, r2
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e7f1      	b.n	8002a82 <_svfiprintf_r+0x17e>
 8002a9e:	ab03      	add	r3, sp, #12
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	462a      	mov	r2, r5
 8002aa4:	4b10      	ldr	r3, [pc, #64]	; (8002ae8 <_svfiprintf_r+0x1e4>)
 8002aa6:	a904      	add	r1, sp, #16
 8002aa8:	4640      	mov	r0, r8
 8002aaa:	f3af 8000 	nop.w
 8002aae:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002ab2:	4681      	mov	r9, r0
 8002ab4:	d1d9      	bne.n	8002a6a <_svfiprintf_r+0x166>
 8002ab6:	89ab      	ldrh	r3, [r5, #12]
 8002ab8:	065b      	lsls	r3, r3, #25
 8002aba:	f53f af38 	bmi.w	800292e <_svfiprintf_r+0x2a>
 8002abe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ac0:	b01d      	add	sp, #116	; 0x74
 8002ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ac6:	ab03      	add	r3, sp, #12
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	462a      	mov	r2, r5
 8002acc:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <_svfiprintf_r+0x1e4>)
 8002ace:	a904      	add	r1, sp, #16
 8002ad0:	4640      	mov	r0, r8
 8002ad2:	f000 f881 	bl	8002bd8 <_printf_i>
 8002ad6:	e7ea      	b.n	8002aae <_svfiprintf_r+0x1aa>
 8002ad8:	08003080 	.word	0x08003080
 8002adc:	08003086 	.word	0x08003086
 8002ae0:	0800308a 	.word	0x0800308a
 8002ae4:	00000000 	.word	0x00000000
 8002ae8:	0800284d 	.word	0x0800284d

08002aec <_printf_common>:
 8002aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002af0:	4691      	mov	r9, r2
 8002af2:	461f      	mov	r7, r3
 8002af4:	688a      	ldr	r2, [r1, #8]
 8002af6:	690b      	ldr	r3, [r1, #16]
 8002af8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002afc:	4293      	cmp	r3, r2
 8002afe:	bfb8      	it	lt
 8002b00:	4613      	movlt	r3, r2
 8002b02:	f8c9 3000 	str.w	r3, [r9]
 8002b06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b0a:	4606      	mov	r6, r0
 8002b0c:	460c      	mov	r4, r1
 8002b0e:	b112      	cbz	r2, 8002b16 <_printf_common+0x2a>
 8002b10:	3301      	adds	r3, #1
 8002b12:	f8c9 3000 	str.w	r3, [r9]
 8002b16:	6823      	ldr	r3, [r4, #0]
 8002b18:	0699      	lsls	r1, r3, #26
 8002b1a:	bf42      	ittt	mi
 8002b1c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002b20:	3302      	addmi	r3, #2
 8002b22:	f8c9 3000 	strmi.w	r3, [r9]
 8002b26:	6825      	ldr	r5, [r4, #0]
 8002b28:	f015 0506 	ands.w	r5, r5, #6
 8002b2c:	d107      	bne.n	8002b3e <_printf_common+0x52>
 8002b2e:	f104 0a19 	add.w	sl, r4, #25
 8002b32:	68e3      	ldr	r3, [r4, #12]
 8002b34:	f8d9 2000 	ldr.w	r2, [r9]
 8002b38:	1a9b      	subs	r3, r3, r2
 8002b3a:	429d      	cmp	r5, r3
 8002b3c:	db29      	blt.n	8002b92 <_printf_common+0xa6>
 8002b3e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002b42:	6822      	ldr	r2, [r4, #0]
 8002b44:	3300      	adds	r3, #0
 8002b46:	bf18      	it	ne
 8002b48:	2301      	movne	r3, #1
 8002b4a:	0692      	lsls	r2, r2, #26
 8002b4c:	d42e      	bmi.n	8002bac <_printf_common+0xc0>
 8002b4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b52:	4639      	mov	r1, r7
 8002b54:	4630      	mov	r0, r6
 8002b56:	47c0      	blx	r8
 8002b58:	3001      	adds	r0, #1
 8002b5a:	d021      	beq.n	8002ba0 <_printf_common+0xb4>
 8002b5c:	6823      	ldr	r3, [r4, #0]
 8002b5e:	68e5      	ldr	r5, [r4, #12]
 8002b60:	f8d9 2000 	ldr.w	r2, [r9]
 8002b64:	f003 0306 	and.w	r3, r3, #6
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	bf08      	it	eq
 8002b6c:	1aad      	subeq	r5, r5, r2
 8002b6e:	68a3      	ldr	r3, [r4, #8]
 8002b70:	6922      	ldr	r2, [r4, #16]
 8002b72:	bf0c      	ite	eq
 8002b74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b78:	2500      	movne	r5, #0
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	bfc4      	itt	gt
 8002b7e:	1a9b      	subgt	r3, r3, r2
 8002b80:	18ed      	addgt	r5, r5, r3
 8002b82:	f04f 0900 	mov.w	r9, #0
 8002b86:	341a      	adds	r4, #26
 8002b88:	454d      	cmp	r5, r9
 8002b8a:	d11b      	bne.n	8002bc4 <_printf_common+0xd8>
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b92:	2301      	movs	r3, #1
 8002b94:	4652      	mov	r2, sl
 8002b96:	4639      	mov	r1, r7
 8002b98:	4630      	mov	r0, r6
 8002b9a:	47c0      	blx	r8
 8002b9c:	3001      	adds	r0, #1
 8002b9e:	d103      	bne.n	8002ba8 <_printf_common+0xbc>
 8002ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ba8:	3501      	adds	r5, #1
 8002baa:	e7c2      	b.n	8002b32 <_printf_common+0x46>
 8002bac:	18e1      	adds	r1, r4, r3
 8002bae:	1c5a      	adds	r2, r3, #1
 8002bb0:	2030      	movs	r0, #48	; 0x30
 8002bb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002bb6:	4422      	add	r2, r4
 8002bb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002bbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002bc0:	3302      	adds	r3, #2
 8002bc2:	e7c4      	b.n	8002b4e <_printf_common+0x62>
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	4622      	mov	r2, r4
 8002bc8:	4639      	mov	r1, r7
 8002bca:	4630      	mov	r0, r6
 8002bcc:	47c0      	blx	r8
 8002bce:	3001      	adds	r0, #1
 8002bd0:	d0e6      	beq.n	8002ba0 <_printf_common+0xb4>
 8002bd2:	f109 0901 	add.w	r9, r9, #1
 8002bd6:	e7d7      	b.n	8002b88 <_printf_common+0x9c>

08002bd8 <_printf_i>:
 8002bd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002bdc:	4617      	mov	r7, r2
 8002bde:	7e0a      	ldrb	r2, [r1, #24]
 8002be0:	b085      	sub	sp, #20
 8002be2:	2a6e      	cmp	r2, #110	; 0x6e
 8002be4:	4698      	mov	r8, r3
 8002be6:	4606      	mov	r6, r0
 8002be8:	460c      	mov	r4, r1
 8002bea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002bec:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002bf0:	f000 80bc 	beq.w	8002d6c <_printf_i+0x194>
 8002bf4:	d81a      	bhi.n	8002c2c <_printf_i+0x54>
 8002bf6:	2a63      	cmp	r2, #99	; 0x63
 8002bf8:	d02e      	beq.n	8002c58 <_printf_i+0x80>
 8002bfa:	d80a      	bhi.n	8002c12 <_printf_i+0x3a>
 8002bfc:	2a00      	cmp	r2, #0
 8002bfe:	f000 80c8 	beq.w	8002d92 <_printf_i+0x1ba>
 8002c02:	2a58      	cmp	r2, #88	; 0x58
 8002c04:	f000 808a 	beq.w	8002d1c <_printf_i+0x144>
 8002c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c0c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002c10:	e02a      	b.n	8002c68 <_printf_i+0x90>
 8002c12:	2a64      	cmp	r2, #100	; 0x64
 8002c14:	d001      	beq.n	8002c1a <_printf_i+0x42>
 8002c16:	2a69      	cmp	r2, #105	; 0x69
 8002c18:	d1f6      	bne.n	8002c08 <_printf_i+0x30>
 8002c1a:	6821      	ldr	r1, [r4, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002c22:	d023      	beq.n	8002c6c <_printf_i+0x94>
 8002c24:	1d11      	adds	r1, r2, #4
 8002c26:	6019      	str	r1, [r3, #0]
 8002c28:	6813      	ldr	r3, [r2, #0]
 8002c2a:	e027      	b.n	8002c7c <_printf_i+0xa4>
 8002c2c:	2a73      	cmp	r2, #115	; 0x73
 8002c2e:	f000 80b4 	beq.w	8002d9a <_printf_i+0x1c2>
 8002c32:	d808      	bhi.n	8002c46 <_printf_i+0x6e>
 8002c34:	2a6f      	cmp	r2, #111	; 0x6f
 8002c36:	d02a      	beq.n	8002c8e <_printf_i+0xb6>
 8002c38:	2a70      	cmp	r2, #112	; 0x70
 8002c3a:	d1e5      	bne.n	8002c08 <_printf_i+0x30>
 8002c3c:	680a      	ldr	r2, [r1, #0]
 8002c3e:	f042 0220 	orr.w	r2, r2, #32
 8002c42:	600a      	str	r2, [r1, #0]
 8002c44:	e003      	b.n	8002c4e <_printf_i+0x76>
 8002c46:	2a75      	cmp	r2, #117	; 0x75
 8002c48:	d021      	beq.n	8002c8e <_printf_i+0xb6>
 8002c4a:	2a78      	cmp	r2, #120	; 0x78
 8002c4c:	d1dc      	bne.n	8002c08 <_printf_i+0x30>
 8002c4e:	2278      	movs	r2, #120	; 0x78
 8002c50:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002c54:	496e      	ldr	r1, [pc, #440]	; (8002e10 <_printf_i+0x238>)
 8002c56:	e064      	b.n	8002d22 <_printf_i+0x14a>
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002c5e:	1d11      	adds	r1, r2, #4
 8002c60:	6019      	str	r1, [r3, #0]
 8002c62:	6813      	ldr	r3, [r2, #0]
 8002c64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0a3      	b.n	8002db4 <_printf_i+0x1dc>
 8002c6c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002c70:	f102 0104 	add.w	r1, r2, #4
 8002c74:	6019      	str	r1, [r3, #0]
 8002c76:	d0d7      	beq.n	8002c28 <_printf_i+0x50>
 8002c78:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	da03      	bge.n	8002c88 <_printf_i+0xb0>
 8002c80:	222d      	movs	r2, #45	; 0x2d
 8002c82:	425b      	negs	r3, r3
 8002c84:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002c88:	4962      	ldr	r1, [pc, #392]	; (8002e14 <_printf_i+0x23c>)
 8002c8a:	220a      	movs	r2, #10
 8002c8c:	e017      	b.n	8002cbe <_printf_i+0xe6>
 8002c8e:	6820      	ldr	r0, [r4, #0]
 8002c90:	6819      	ldr	r1, [r3, #0]
 8002c92:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002c96:	d003      	beq.n	8002ca0 <_printf_i+0xc8>
 8002c98:	1d08      	adds	r0, r1, #4
 8002c9a:	6018      	str	r0, [r3, #0]
 8002c9c:	680b      	ldr	r3, [r1, #0]
 8002c9e:	e006      	b.n	8002cae <_printf_i+0xd6>
 8002ca0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002ca4:	f101 0004 	add.w	r0, r1, #4
 8002ca8:	6018      	str	r0, [r3, #0]
 8002caa:	d0f7      	beq.n	8002c9c <_printf_i+0xc4>
 8002cac:	880b      	ldrh	r3, [r1, #0]
 8002cae:	4959      	ldr	r1, [pc, #356]	; (8002e14 <_printf_i+0x23c>)
 8002cb0:	2a6f      	cmp	r2, #111	; 0x6f
 8002cb2:	bf14      	ite	ne
 8002cb4:	220a      	movne	r2, #10
 8002cb6:	2208      	moveq	r2, #8
 8002cb8:	2000      	movs	r0, #0
 8002cba:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002cbe:	6865      	ldr	r5, [r4, #4]
 8002cc0:	60a5      	str	r5, [r4, #8]
 8002cc2:	2d00      	cmp	r5, #0
 8002cc4:	f2c0 809c 	blt.w	8002e00 <_printf_i+0x228>
 8002cc8:	6820      	ldr	r0, [r4, #0]
 8002cca:	f020 0004 	bic.w	r0, r0, #4
 8002cce:	6020      	str	r0, [r4, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d13f      	bne.n	8002d54 <_printf_i+0x17c>
 8002cd4:	2d00      	cmp	r5, #0
 8002cd6:	f040 8095 	bne.w	8002e04 <_printf_i+0x22c>
 8002cda:	4675      	mov	r5, lr
 8002cdc:	2a08      	cmp	r2, #8
 8002cde:	d10b      	bne.n	8002cf8 <_printf_i+0x120>
 8002ce0:	6823      	ldr	r3, [r4, #0]
 8002ce2:	07da      	lsls	r2, r3, #31
 8002ce4:	d508      	bpl.n	8002cf8 <_printf_i+0x120>
 8002ce6:	6923      	ldr	r3, [r4, #16]
 8002ce8:	6862      	ldr	r2, [r4, #4]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	bfde      	ittt	le
 8002cee:	2330      	movle	r3, #48	; 0x30
 8002cf0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002cf4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002cf8:	ebae 0305 	sub.w	r3, lr, r5
 8002cfc:	6123      	str	r3, [r4, #16]
 8002cfe:	f8cd 8000 	str.w	r8, [sp]
 8002d02:	463b      	mov	r3, r7
 8002d04:	aa03      	add	r2, sp, #12
 8002d06:	4621      	mov	r1, r4
 8002d08:	4630      	mov	r0, r6
 8002d0a:	f7ff feef 	bl	8002aec <_printf_common>
 8002d0e:	3001      	adds	r0, #1
 8002d10:	d155      	bne.n	8002dbe <_printf_i+0x1e6>
 8002d12:	f04f 30ff 	mov.w	r0, #4294967295
 8002d16:	b005      	add	sp, #20
 8002d18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d1c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002d20:	493c      	ldr	r1, [pc, #240]	; (8002e14 <_printf_i+0x23c>)
 8002d22:	6822      	ldr	r2, [r4, #0]
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002d2a:	f100 0504 	add.w	r5, r0, #4
 8002d2e:	601d      	str	r5, [r3, #0]
 8002d30:	d001      	beq.n	8002d36 <_printf_i+0x15e>
 8002d32:	6803      	ldr	r3, [r0, #0]
 8002d34:	e002      	b.n	8002d3c <_printf_i+0x164>
 8002d36:	0655      	lsls	r5, r2, #25
 8002d38:	d5fb      	bpl.n	8002d32 <_printf_i+0x15a>
 8002d3a:	8803      	ldrh	r3, [r0, #0]
 8002d3c:	07d0      	lsls	r0, r2, #31
 8002d3e:	bf44      	itt	mi
 8002d40:	f042 0220 	orrmi.w	r2, r2, #32
 8002d44:	6022      	strmi	r2, [r4, #0]
 8002d46:	b91b      	cbnz	r3, 8002d50 <_printf_i+0x178>
 8002d48:	6822      	ldr	r2, [r4, #0]
 8002d4a:	f022 0220 	bic.w	r2, r2, #32
 8002d4e:	6022      	str	r2, [r4, #0]
 8002d50:	2210      	movs	r2, #16
 8002d52:	e7b1      	b.n	8002cb8 <_printf_i+0xe0>
 8002d54:	4675      	mov	r5, lr
 8002d56:	fbb3 f0f2 	udiv	r0, r3, r2
 8002d5a:	fb02 3310 	mls	r3, r2, r0, r3
 8002d5e:	5ccb      	ldrb	r3, [r1, r3]
 8002d60:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002d64:	4603      	mov	r3, r0
 8002d66:	2800      	cmp	r0, #0
 8002d68:	d1f5      	bne.n	8002d56 <_printf_i+0x17e>
 8002d6a:	e7b7      	b.n	8002cdc <_printf_i+0x104>
 8002d6c:	6808      	ldr	r0, [r1, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	6949      	ldr	r1, [r1, #20]
 8002d72:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002d76:	d004      	beq.n	8002d82 <_printf_i+0x1aa>
 8002d78:	1d10      	adds	r0, r2, #4
 8002d7a:	6018      	str	r0, [r3, #0]
 8002d7c:	6813      	ldr	r3, [r2, #0]
 8002d7e:	6019      	str	r1, [r3, #0]
 8002d80:	e007      	b.n	8002d92 <_printf_i+0x1ba>
 8002d82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002d86:	f102 0004 	add.w	r0, r2, #4
 8002d8a:	6018      	str	r0, [r3, #0]
 8002d8c:	6813      	ldr	r3, [r2, #0]
 8002d8e:	d0f6      	beq.n	8002d7e <_printf_i+0x1a6>
 8002d90:	8019      	strh	r1, [r3, #0]
 8002d92:	2300      	movs	r3, #0
 8002d94:	6123      	str	r3, [r4, #16]
 8002d96:	4675      	mov	r5, lr
 8002d98:	e7b1      	b.n	8002cfe <_printf_i+0x126>
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	1d11      	adds	r1, r2, #4
 8002d9e:	6019      	str	r1, [r3, #0]
 8002da0:	6815      	ldr	r5, [r2, #0]
 8002da2:	6862      	ldr	r2, [r4, #4]
 8002da4:	2100      	movs	r1, #0
 8002da6:	4628      	mov	r0, r5
 8002da8:	f7fd fa12 	bl	80001d0 <memchr>
 8002dac:	b108      	cbz	r0, 8002db2 <_printf_i+0x1da>
 8002dae:	1b40      	subs	r0, r0, r5
 8002db0:	6060      	str	r0, [r4, #4]
 8002db2:	6863      	ldr	r3, [r4, #4]
 8002db4:	6123      	str	r3, [r4, #16]
 8002db6:	2300      	movs	r3, #0
 8002db8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002dbc:	e79f      	b.n	8002cfe <_printf_i+0x126>
 8002dbe:	6923      	ldr	r3, [r4, #16]
 8002dc0:	462a      	mov	r2, r5
 8002dc2:	4639      	mov	r1, r7
 8002dc4:	4630      	mov	r0, r6
 8002dc6:	47c0      	blx	r8
 8002dc8:	3001      	adds	r0, #1
 8002dca:	d0a2      	beq.n	8002d12 <_printf_i+0x13a>
 8002dcc:	6823      	ldr	r3, [r4, #0]
 8002dce:	079b      	lsls	r3, r3, #30
 8002dd0:	d507      	bpl.n	8002de2 <_printf_i+0x20a>
 8002dd2:	2500      	movs	r5, #0
 8002dd4:	f104 0919 	add.w	r9, r4, #25
 8002dd8:	68e3      	ldr	r3, [r4, #12]
 8002dda:	9a03      	ldr	r2, [sp, #12]
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	429d      	cmp	r5, r3
 8002de0:	db05      	blt.n	8002dee <_printf_i+0x216>
 8002de2:	68e0      	ldr	r0, [r4, #12]
 8002de4:	9b03      	ldr	r3, [sp, #12]
 8002de6:	4298      	cmp	r0, r3
 8002de8:	bfb8      	it	lt
 8002dea:	4618      	movlt	r0, r3
 8002dec:	e793      	b.n	8002d16 <_printf_i+0x13e>
 8002dee:	2301      	movs	r3, #1
 8002df0:	464a      	mov	r2, r9
 8002df2:	4639      	mov	r1, r7
 8002df4:	4630      	mov	r0, r6
 8002df6:	47c0      	blx	r8
 8002df8:	3001      	adds	r0, #1
 8002dfa:	d08a      	beq.n	8002d12 <_printf_i+0x13a>
 8002dfc:	3501      	adds	r5, #1
 8002dfe:	e7eb      	b.n	8002dd8 <_printf_i+0x200>
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1a7      	bne.n	8002d54 <_printf_i+0x17c>
 8002e04:	780b      	ldrb	r3, [r1, #0]
 8002e06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e0a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e0e:	e765      	b.n	8002cdc <_printf_i+0x104>
 8002e10:	080030a2 	.word	0x080030a2
 8002e14:	08003091 	.word	0x08003091

08002e18 <memcpy>:
 8002e18:	b510      	push	{r4, lr}
 8002e1a:	1e43      	subs	r3, r0, #1
 8002e1c:	440a      	add	r2, r1
 8002e1e:	4291      	cmp	r1, r2
 8002e20:	d100      	bne.n	8002e24 <memcpy+0xc>
 8002e22:	bd10      	pop	{r4, pc}
 8002e24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e2c:	e7f7      	b.n	8002e1e <memcpy+0x6>

08002e2e <memmove>:
 8002e2e:	4288      	cmp	r0, r1
 8002e30:	b510      	push	{r4, lr}
 8002e32:	eb01 0302 	add.w	r3, r1, r2
 8002e36:	d803      	bhi.n	8002e40 <memmove+0x12>
 8002e38:	1e42      	subs	r2, r0, #1
 8002e3a:	4299      	cmp	r1, r3
 8002e3c:	d10c      	bne.n	8002e58 <memmove+0x2a>
 8002e3e:	bd10      	pop	{r4, pc}
 8002e40:	4298      	cmp	r0, r3
 8002e42:	d2f9      	bcs.n	8002e38 <memmove+0xa>
 8002e44:	1881      	adds	r1, r0, r2
 8002e46:	1ad2      	subs	r2, r2, r3
 8002e48:	42d3      	cmn	r3, r2
 8002e4a:	d100      	bne.n	8002e4e <memmove+0x20>
 8002e4c:	bd10      	pop	{r4, pc}
 8002e4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002e52:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002e56:	e7f7      	b.n	8002e48 <memmove+0x1a>
 8002e58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e5c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002e60:	e7eb      	b.n	8002e3a <memmove+0xc>
	...

08002e64 <_free_r>:
 8002e64:	b538      	push	{r3, r4, r5, lr}
 8002e66:	4605      	mov	r5, r0
 8002e68:	2900      	cmp	r1, #0
 8002e6a:	d045      	beq.n	8002ef8 <_free_r+0x94>
 8002e6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e70:	1f0c      	subs	r4, r1, #4
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	bfb8      	it	lt
 8002e76:	18e4      	addlt	r4, r4, r3
 8002e78:	f000 f8d6 	bl	8003028 <__malloc_lock>
 8002e7c:	4a1f      	ldr	r2, [pc, #124]	; (8002efc <_free_r+0x98>)
 8002e7e:	6813      	ldr	r3, [r2, #0]
 8002e80:	4610      	mov	r0, r2
 8002e82:	b933      	cbnz	r3, 8002e92 <_free_r+0x2e>
 8002e84:	6063      	str	r3, [r4, #4]
 8002e86:	6014      	str	r4, [r2, #0]
 8002e88:	4628      	mov	r0, r5
 8002e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e8e:	f000 b8cc 	b.w	800302a <__malloc_unlock>
 8002e92:	42a3      	cmp	r3, r4
 8002e94:	d90c      	bls.n	8002eb0 <_free_r+0x4c>
 8002e96:	6821      	ldr	r1, [r4, #0]
 8002e98:	1862      	adds	r2, r4, r1
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	bf04      	itt	eq
 8002e9e:	681a      	ldreq	r2, [r3, #0]
 8002ea0:	685b      	ldreq	r3, [r3, #4]
 8002ea2:	6063      	str	r3, [r4, #4]
 8002ea4:	bf04      	itt	eq
 8002ea6:	1852      	addeq	r2, r2, r1
 8002ea8:	6022      	streq	r2, [r4, #0]
 8002eaa:	6004      	str	r4, [r0, #0]
 8002eac:	e7ec      	b.n	8002e88 <_free_r+0x24>
 8002eae:	4613      	mov	r3, r2
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	b10a      	cbz	r2, 8002eb8 <_free_r+0x54>
 8002eb4:	42a2      	cmp	r2, r4
 8002eb6:	d9fa      	bls.n	8002eae <_free_r+0x4a>
 8002eb8:	6819      	ldr	r1, [r3, #0]
 8002eba:	1858      	adds	r0, r3, r1
 8002ebc:	42a0      	cmp	r0, r4
 8002ebe:	d10b      	bne.n	8002ed8 <_free_r+0x74>
 8002ec0:	6820      	ldr	r0, [r4, #0]
 8002ec2:	4401      	add	r1, r0
 8002ec4:	1858      	adds	r0, r3, r1
 8002ec6:	4282      	cmp	r2, r0
 8002ec8:	6019      	str	r1, [r3, #0]
 8002eca:	d1dd      	bne.n	8002e88 <_free_r+0x24>
 8002ecc:	6810      	ldr	r0, [r2, #0]
 8002ece:	6852      	ldr	r2, [r2, #4]
 8002ed0:	605a      	str	r2, [r3, #4]
 8002ed2:	4401      	add	r1, r0
 8002ed4:	6019      	str	r1, [r3, #0]
 8002ed6:	e7d7      	b.n	8002e88 <_free_r+0x24>
 8002ed8:	d902      	bls.n	8002ee0 <_free_r+0x7c>
 8002eda:	230c      	movs	r3, #12
 8002edc:	602b      	str	r3, [r5, #0]
 8002ede:	e7d3      	b.n	8002e88 <_free_r+0x24>
 8002ee0:	6820      	ldr	r0, [r4, #0]
 8002ee2:	1821      	adds	r1, r4, r0
 8002ee4:	428a      	cmp	r2, r1
 8002ee6:	bf04      	itt	eq
 8002ee8:	6811      	ldreq	r1, [r2, #0]
 8002eea:	6852      	ldreq	r2, [r2, #4]
 8002eec:	6062      	str	r2, [r4, #4]
 8002eee:	bf04      	itt	eq
 8002ef0:	1809      	addeq	r1, r1, r0
 8002ef2:	6021      	streq	r1, [r4, #0]
 8002ef4:	605c      	str	r4, [r3, #4]
 8002ef6:	e7c7      	b.n	8002e88 <_free_r+0x24>
 8002ef8:	bd38      	pop	{r3, r4, r5, pc}
 8002efa:	bf00      	nop
 8002efc:	20000094 	.word	0x20000094

08002f00 <_malloc_r>:
 8002f00:	b570      	push	{r4, r5, r6, lr}
 8002f02:	1ccd      	adds	r5, r1, #3
 8002f04:	f025 0503 	bic.w	r5, r5, #3
 8002f08:	3508      	adds	r5, #8
 8002f0a:	2d0c      	cmp	r5, #12
 8002f0c:	bf38      	it	cc
 8002f0e:	250c      	movcc	r5, #12
 8002f10:	2d00      	cmp	r5, #0
 8002f12:	4606      	mov	r6, r0
 8002f14:	db01      	blt.n	8002f1a <_malloc_r+0x1a>
 8002f16:	42a9      	cmp	r1, r5
 8002f18:	d903      	bls.n	8002f22 <_malloc_r+0x22>
 8002f1a:	230c      	movs	r3, #12
 8002f1c:	6033      	str	r3, [r6, #0]
 8002f1e:	2000      	movs	r0, #0
 8002f20:	bd70      	pop	{r4, r5, r6, pc}
 8002f22:	f000 f881 	bl	8003028 <__malloc_lock>
 8002f26:	4a23      	ldr	r2, [pc, #140]	; (8002fb4 <_malloc_r+0xb4>)
 8002f28:	6814      	ldr	r4, [r2, #0]
 8002f2a:	4621      	mov	r1, r4
 8002f2c:	b991      	cbnz	r1, 8002f54 <_malloc_r+0x54>
 8002f2e:	4c22      	ldr	r4, [pc, #136]	; (8002fb8 <_malloc_r+0xb8>)
 8002f30:	6823      	ldr	r3, [r4, #0]
 8002f32:	b91b      	cbnz	r3, 8002f3c <_malloc_r+0x3c>
 8002f34:	4630      	mov	r0, r6
 8002f36:	f000 f867 	bl	8003008 <_sbrk_r>
 8002f3a:	6020      	str	r0, [r4, #0]
 8002f3c:	4629      	mov	r1, r5
 8002f3e:	4630      	mov	r0, r6
 8002f40:	f000 f862 	bl	8003008 <_sbrk_r>
 8002f44:	1c43      	adds	r3, r0, #1
 8002f46:	d126      	bne.n	8002f96 <_malloc_r+0x96>
 8002f48:	230c      	movs	r3, #12
 8002f4a:	6033      	str	r3, [r6, #0]
 8002f4c:	4630      	mov	r0, r6
 8002f4e:	f000 f86c 	bl	800302a <__malloc_unlock>
 8002f52:	e7e4      	b.n	8002f1e <_malloc_r+0x1e>
 8002f54:	680b      	ldr	r3, [r1, #0]
 8002f56:	1b5b      	subs	r3, r3, r5
 8002f58:	d41a      	bmi.n	8002f90 <_malloc_r+0x90>
 8002f5a:	2b0b      	cmp	r3, #11
 8002f5c:	d90f      	bls.n	8002f7e <_malloc_r+0x7e>
 8002f5e:	600b      	str	r3, [r1, #0]
 8002f60:	50cd      	str	r5, [r1, r3]
 8002f62:	18cc      	adds	r4, r1, r3
 8002f64:	4630      	mov	r0, r6
 8002f66:	f000 f860 	bl	800302a <__malloc_unlock>
 8002f6a:	f104 000b 	add.w	r0, r4, #11
 8002f6e:	1d23      	adds	r3, r4, #4
 8002f70:	f020 0007 	bic.w	r0, r0, #7
 8002f74:	1ac3      	subs	r3, r0, r3
 8002f76:	d01b      	beq.n	8002fb0 <_malloc_r+0xb0>
 8002f78:	425a      	negs	r2, r3
 8002f7a:	50e2      	str	r2, [r4, r3]
 8002f7c:	bd70      	pop	{r4, r5, r6, pc}
 8002f7e:	428c      	cmp	r4, r1
 8002f80:	bf0d      	iteet	eq
 8002f82:	6863      	ldreq	r3, [r4, #4]
 8002f84:	684b      	ldrne	r3, [r1, #4]
 8002f86:	6063      	strne	r3, [r4, #4]
 8002f88:	6013      	streq	r3, [r2, #0]
 8002f8a:	bf18      	it	ne
 8002f8c:	460c      	movne	r4, r1
 8002f8e:	e7e9      	b.n	8002f64 <_malloc_r+0x64>
 8002f90:	460c      	mov	r4, r1
 8002f92:	6849      	ldr	r1, [r1, #4]
 8002f94:	e7ca      	b.n	8002f2c <_malloc_r+0x2c>
 8002f96:	1cc4      	adds	r4, r0, #3
 8002f98:	f024 0403 	bic.w	r4, r4, #3
 8002f9c:	42a0      	cmp	r0, r4
 8002f9e:	d005      	beq.n	8002fac <_malloc_r+0xac>
 8002fa0:	1a21      	subs	r1, r4, r0
 8002fa2:	4630      	mov	r0, r6
 8002fa4:	f000 f830 	bl	8003008 <_sbrk_r>
 8002fa8:	3001      	adds	r0, #1
 8002faa:	d0cd      	beq.n	8002f48 <_malloc_r+0x48>
 8002fac:	6025      	str	r5, [r4, #0]
 8002fae:	e7d9      	b.n	8002f64 <_malloc_r+0x64>
 8002fb0:	bd70      	pop	{r4, r5, r6, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20000094 	.word	0x20000094
 8002fb8:	20000098 	.word	0x20000098

08002fbc <_realloc_r>:
 8002fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fbe:	4607      	mov	r7, r0
 8002fc0:	4614      	mov	r4, r2
 8002fc2:	460e      	mov	r6, r1
 8002fc4:	b921      	cbnz	r1, 8002fd0 <_realloc_r+0x14>
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002fcc:	f7ff bf98 	b.w	8002f00 <_malloc_r>
 8002fd0:	b922      	cbnz	r2, 8002fdc <_realloc_r+0x20>
 8002fd2:	f7ff ff47 	bl	8002e64 <_free_r>
 8002fd6:	4625      	mov	r5, r4
 8002fd8:	4628      	mov	r0, r5
 8002fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fdc:	f000 f826 	bl	800302c <_malloc_usable_size_r>
 8002fe0:	4284      	cmp	r4, r0
 8002fe2:	d90f      	bls.n	8003004 <_realloc_r+0x48>
 8002fe4:	4621      	mov	r1, r4
 8002fe6:	4638      	mov	r0, r7
 8002fe8:	f7ff ff8a 	bl	8002f00 <_malloc_r>
 8002fec:	4605      	mov	r5, r0
 8002fee:	2800      	cmp	r0, #0
 8002ff0:	d0f2      	beq.n	8002fd8 <_realloc_r+0x1c>
 8002ff2:	4631      	mov	r1, r6
 8002ff4:	4622      	mov	r2, r4
 8002ff6:	f7ff ff0f 	bl	8002e18 <memcpy>
 8002ffa:	4631      	mov	r1, r6
 8002ffc:	4638      	mov	r0, r7
 8002ffe:	f7ff ff31 	bl	8002e64 <_free_r>
 8003002:	e7e9      	b.n	8002fd8 <_realloc_r+0x1c>
 8003004:	4635      	mov	r5, r6
 8003006:	e7e7      	b.n	8002fd8 <_realloc_r+0x1c>

08003008 <_sbrk_r>:
 8003008:	b538      	push	{r3, r4, r5, lr}
 800300a:	4c06      	ldr	r4, [pc, #24]	; (8003024 <_sbrk_r+0x1c>)
 800300c:	2300      	movs	r3, #0
 800300e:	4605      	mov	r5, r0
 8003010:	4608      	mov	r0, r1
 8003012:	6023      	str	r3, [r4, #0]
 8003014:	f7fd fc70 	bl	80008f8 <_sbrk>
 8003018:	1c43      	adds	r3, r0, #1
 800301a:	d102      	bne.n	8003022 <_sbrk_r+0x1a>
 800301c:	6823      	ldr	r3, [r4, #0]
 800301e:	b103      	cbz	r3, 8003022 <_sbrk_r+0x1a>
 8003020:	602b      	str	r3, [r5, #0]
 8003022:	bd38      	pop	{r3, r4, r5, pc}
 8003024:	20000140 	.word	0x20000140

08003028 <__malloc_lock>:
 8003028:	4770      	bx	lr

0800302a <__malloc_unlock>:
 800302a:	4770      	bx	lr

0800302c <_malloc_usable_size_r>:
 800302c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003030:	2800      	cmp	r0, #0
 8003032:	f1a0 0004 	sub.w	r0, r0, #4
 8003036:	bfbc      	itt	lt
 8003038:	580b      	ldrlt	r3, [r1, r0]
 800303a:	18c0      	addlt	r0, r0, r3
 800303c:	4770      	bx	lr
	...

08003040 <_init>:
 8003040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003042:	bf00      	nop
 8003044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003046:	bc08      	pop	{r3}
 8003048:	469e      	mov	lr, r3
 800304a:	4770      	bx	lr

0800304c <_fini>:
 800304c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304e:	bf00      	nop
 8003050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003052:	bc08      	pop	{r3}
 8003054:	469e      	mov	lr, r3
 8003056:	4770      	bx	lr
